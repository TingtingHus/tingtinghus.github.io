<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>三味书屋</title>
  
  <subtitle>老骥伏枥，志在千里</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-01-16T10:00:36.109Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Tingting Hu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>京东平台数据化运营</title>
    <link href="http://example.com/2021/11/03/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%9A%E4%BA%AC%E4%B8%9C%E5%B9%B3%E5%8F%B0%E6%95%B0%E6%8D%AE%E5%8C%96%E8%BF%90%E8%90%A5/"/>
    <id>http://example.com/2021/11/03/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%9A%E4%BA%AC%E4%B8%9C%E5%B9%B3%E5%8F%B0%E6%95%B0%E6%8D%AE%E5%8C%96%E8%BF%90%E8%90%A5/</id>
    <published>2021-11-03T09:27:00.000Z</published>
    <updated>2021-01-16T10:00:36.109Z</updated>
    
    <content type="html"><![CDATA[<p>三星。<br>全书落脚点在“运营”二字，更精准的读者是商家和运营人员，内容围绕：销售额 = 流量 * 转化率 * 客单价展开，获取流量、提高转化率、提升客单价和复购率组织章节内容，又名《京东商家操作指南》以及《京东平台营销大法》。记录了不少案例，对电商引流、营销有学习需求的，可以一看。</p><p><img src="https://i.loli.net/2020/11/09/SFw6tQ91X5E2khb.jpg" alt="京东平台数据化运营.jpg"></p><h1 id="简单笔记："><a href="#简单笔记：" class="headerlink" title="简单笔记："></a>简单笔记：</h1><h2 id="第一章-流量"><a href="#第一章-流量" class="headerlink" title="第一章 流量"></a>第一章 流量</h2><h3 id="基本公式：销售额-流量-转化率-客单价"><a href="#基本公式：销售额-流量-转化率-客单价" class="headerlink" title="基本公式：销售额 = 流量 * 转化率 * 客单价"></a>基本公式：销售额 = 流量 * 转化率 * 客单价</h3><p>当竞争越来越激烈的时候，精细化运营一定是一个必然的趋势。<br>流量的重要指标<br>衡量流量多寡：访客数、浏览量、访问次数<br>衡量流量质量：平均访问深度、平均停留时间、跳失率</p><p>访客数UV：同一用户在同一个统计时间窗口内从多个不同渠道多次访问只会被计算为一次<br>浏览量PV：同一用户多次浏览或刷新同一页面，浏览器累加<br>访问次数：同一用户在一个统计窗口内访问同一家店铺的次数<br>平均访问深度 = 浏览量 / 访问次数，衡量用户在一个店铺访问时，浏览了几个页面<br>平均停留时间 = 总停留时间 / 总浏览量<br>跳失率 = 跳出页次数 / 访问次数，衡量用户只访问店铺或商品一个页面就离开店铺的次数占总访问次数的比例</p><h3 id="流量的诊断"><a href="#流量的诊断" class="headerlink" title="流量的诊断"></a>流量的诊断</h3><p>第一步：稳定性<br>第二步：合理性：根据店铺的发展阶段不同，流量的大小和占比也不同，重点是要分析各个渠道的占比变化<br>第三步：成长性：流量来源分析、访客来源分析、成交来源分析</p><h2 id="第二章-转化率"><a href="#第二章-转化率" class="headerlink" title="第二章 转化率"></a>第二章 转化率</h2><p>成交转化率指标<br>静默转化率、咨询转化率、加购转化率、付款转化率</p><p>入店访客数<br>有效访客数<br>咨询访客数<br>加购访客数<br>订单访客数<br>成交访客数 ：下单的总客户数<br>成交转化率 = 成交客户数 / 访问客户数<br>静默转化率 = 静默成交的客户数 / 总静默客户数<br>咨询转化率 = 咨询成交客 / 总咨询访客数<br>加购转化率 = 成交访客数 / 点击加入购物车的访客<br>付款转化率 = 先款订单已付款订单 / 先款订单总下单量</p><h3 id="影响转化率的重要因素"><a href="#影响转化率的重要因素" class="headerlink" title="影响转化率的重要因素"></a>影响转化率的重要因素</h3><p>第一阶段：引流<br>精准优质的流量入口是成功的一半，即提高流量的精准度和相关度<br>第二阶段：售前、售中<br>店铺相关、商品相关、客服相关、物流相关、卖家原因、库存情况、竞品情况、售后保障体系<br>第三阶段：售后<br>发货、配送、收货、评价、售后</p><h3 id="六大关键步骤"><a href="#六大关键步骤" class="headerlink" title="六大关键步骤"></a>六大关键步骤</h3><p>流量来源是关键：流量从哪里来，搜索的关键字有哪些，每个关键字的转化率<br>承接好坏看页面：商品详情页的描述和布局，可以通过热力图查看用户的感兴趣点<br>用户选购拼商品<br>商品背后是服务<br>物流库存莫忽视<br>竞品动态要追踪：竞品是否有活动，价格波动</p><h3 id="转化率对比的四个维度"><a href="#转化率对比的四个维度" class="headerlink" title="转化率对比的四个维度"></a>转化率对比的四个维度</h3><p>行业优秀<br>行业相似<br>本店同期<br>本店上升</p><h3 id="寻找准化率低的原因"><a href="#寻找准化率低的原因" class="headerlink" title="寻找准化率低的原因"></a>寻找准化率低的原因</h3><p>1.找问题终端<br>2.找问题来源<br>3.找问题页面（热力图）<br>4.找问题商品（TOP流量商品追踪法、TOP销售商品追踪法、双TOP对比法）<br>5.找问题服务</p><h2 id="第三章-提升客单价"><a href="#第三章-提升客单价" class="headerlink" title="第三章 提升客单价"></a>第三章 提升客单价</h2><p>客单价 = 下单金额 / 下单用户数<br>客单件 = 下单件数 / 下单用户数</p><h3 id="商品分类"><a href="#商品分类" class="headerlink" title="商品分类"></a>商品分类</h3><p>1.常用款：以成本为导向的定价<br>2.引流款：价格降低，性价比高，主要是为了其它商品引流，因此要注意关联营销<br>3.利润款：在市场上具有优势，竞品较少，定价可以适当提高，是店铺的主要利润来源<br>4.活动款：可以在之前有较高定价，活动中降价，吸引用户<br>5.爆款：预热期的爆款定价可以偏低，发展期的爆款可以维持定价，增加利润，成熟期的爆款可以适当提高定价，衰退期的爆款价格可以适当降低<br>6.旗舰款：旗舰款的定位是高端人群，打造的是品牌效益，可以适当提高定价，追求利润<br>7.边缘款：可以进行适当的品牌包装或取舍</p><h3 id="如何提高客单价"><a href="#如何提高客单价" class="headerlink" title="如何提高客单价"></a>如何提高客单价</h3><p>一是打造爆款<br>二是进行关联营销：比如免邮、满减、满赠、套装<br>对于关联的商品主要有同类替代、异类相关、商品功能性互补、解决方案型互补、情感嫁接型、活动类目推广型</p><h2 id="第四章-增加复购率"><a href="#第四章-增加复购率" class="headerlink" title="第四章 增加复购率"></a>第四章 增加复购率</h2><p>做好用户关系维护，增加用户满意度，提高一定时间内用户的下单频率。<br>流量<br>客单价<br>转化率<br>复购率（说白了就是黏性，RFM中的F 频率）：用户复购率、订单复购率<br>评价率</p><p>会员回头率 = 回购的会员数 / 总购买客户数<br>新用户留存率 = 新用户留存数 / 新用户总数  （新用户留存数是指产生了成功交易的用户）</p><h3 id="影响复购率的因素"><a href="#影响复购率的因素" class="headerlink" title="影响复购率的因素"></a>影响复购率的因素</h3><p>1.商品质量<br>2.服务质量<br>3.物流满意度</p><h3 id="提升复购率的方法"><a href="#提升复购率的方法" class="headerlink" title="提升复购率的方法"></a>提升复购率的方法</h3><p>1.建立会员管理体制<br>2.巧用优惠券精准营销（根据渠道、消费行为）<br>3.赋予会员专享权益<br>4.会员娱乐式互动（签到、社群等）</p><h2 id="第五章-行业分析"><a href="#第五章-行业分析" class="headerlink" title="第五章 行业分析"></a>第五章 行业分析</h2><h3 id="用户心智模型"><a href="#用户心智模型" class="headerlink" title="用户心智模型"></a>用户心智模型</h3><p>1.只能接受有限的信息<br>2.喜欢简单，讨厌复杂<br>3.缺乏安全感<br>4.对品牌印象不会轻易改变<br>5.心智容易失去焦点</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;三星。&lt;br&gt;全书落脚点在“运营”二字，更精准的读者是商家和运营人员，内容围绕：销售额 = 流量 * 转化率 * 客单价展开，获取流量、提高转化率、提升客单价和复购率组织章节内容，又名《京东商家操作指南》以及《京东平台营销大法》。记录了不少案例，对电商引流、营销有学习需求的</summary>
      
    
    
    
    <category term="读书笔记" scheme="http://example.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="数据分析" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>豆瓣小组社区流量数据分析</title>
    <link href="http://example.com/2021/01/06/%E3%80%90%E5%AE%9E%E6%88%98%E3%80%91%E8%B1%86%E7%93%A3%E5%B0%8F%E7%BB%84%E7%A4%BE%E5%8C%BA%E6%B5%81%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2021/01/06/%E3%80%90%E5%AE%9E%E6%88%98%E3%80%91%E8%B1%86%E7%93%A3%E5%B0%8F%E7%BB%84%E7%A4%BE%E5%8C%BA%E6%B5%81%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/</id>
    <published>2021-01-06T04:20:00.000Z</published>
    <updated>2021-01-16T10:00:42.135Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-项目目标"><a href="#0-项目目标" class="headerlink" title="0.项目目标"></a>0.项目目标</h1><p>作为数据分析的系列实战练习项目，本次研究的主要目的为：</p><ol><li>熟悉Python编程，通过爬虫获取豆瓣热门小组多维度数据，利用Pandas、PyEcharts进行分析和可视化；</li><li>掌握数据分析思维和方法，完成豆瓣小组日活、留存、用户画像等运营数据分析；</li><li>完成分析报告。</li></ol><h1 id="1-业务理解"><a href="#1-业务理解" class="headerlink" title="1.业务理解"></a>1.业务理解</h1><h2 id="豆瓣小组介绍"><a href="#豆瓣小组介绍" class="headerlink" title="豆瓣小组介绍"></a>豆瓣小组介绍</h2><p>豆瓣是一个以书影音信息为主，论坛功能为辅的社交APP。豆瓣论坛功能主要集中在小组。豆瓣小组，已经成为当代年轻人（特别是追星饭圈爱好者）聚集和社交的重要阵地。<br>截止2020年12月22号，豆瓣27个大类下一共有714757个小组，涵盖时尚、宠物、求职、租房、理财、读书、情感、美食、旅行、运动、职场、娱乐、兴趣、影视、闲趣、校园、生活、摄影、同城、音乐、科技、游戏、打卡、艺术、人文、动漫、追剧等方面。</p><h2 id="研究内容"><a href="#研究内容" class="headerlink" title="研究内容"></a>研究内容</h2><p>本文旨在基于对热门小组发帖、回复等维度的数据分析，了解豆瓣小组用户的活跃情况，以及通过对top小组成员的分析，刻画小组用户画像。</p><h1 id="2-数据爬取"><a href="#2-数据爬取" class="headerlink" title="2.数据爬取"></a>2.数据爬取</h1><p>利用Python的Selenium库爬取豆瓣部分小组数据，由于豆瓣小组每日发帖量巨大（日均12万左右）且豆瓣具有严厉的反爬虫机制，故仅针对25个热门小组爬取了2020年11月28号和2020年11月29号两天（周六周日）的数据。此外，针对TOP小组活跃用户进行数据采集，刻画小组活跃用户画像。</p><p>需要说明的是:</p><blockquote><p>豆瓣小组全站范围每增加一个新帖，帖子的id就会加一，程序在12月4号到12月16(20?)号期间按照帖子id依次爬取11月28号和11月29号两天发布的帖子及回复。<br>由于当天不仅可以回复当日新发帖子也可以回复过往发布的帖子，29号以后也可以回复28号和29号发布的贴子，因此，所有活跃指标均基于当日（28、29号）新发帖子，故并不能完整反映小组活跃程度，小组真实活跃情况应远高于本文分析结果。<br>不仅如此，本文的部分分析指标（如点赞数等）也与程序执行的时间段高度相关。</p></blockquote><h3 id="热门小组选取："><a href="#热门小组选取：" class="headerlink" title="热门小组选取："></a>热门小组选取：</h3><table><thead><tr><th align="center">序号</th><th align="center">id</th><th align="center">小组名</th><th align="center">成立时间</th><th align="center">成员数</th><th align="center">小组标签</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">634189</td><td align="center">豆瓣吃瓜人才组</td><td align="center">2018-04-02</td><td align="center">553565</td><td align="center">娱乐、八卦、人才、豆瓣、吃瓜</td></tr><tr><td align="center">2</td><td align="center">babysheep</td><td align="center">青青草原</td><td align="center">2018-07-23</td><td align="center">464154</td><td align="center">娱乐、学习、生活、旅游、科技</td></tr><tr><td align="center">3</td><td align="center">634210</td><td align="center">豆瓣彩虹组</td><td align="center">2018-04-02</td><td align="center">331574</td><td align="center">娱乐、豆瓣糊组、糊组、影视、明星</td></tr><tr><td align="center">4</td><td align="center">blabla</td><td align="center">豆瓣鹅组</td><td align="center">2010-05-26</td><td align="center">696036</td><td align="center">明星、红人、综艺、影视</td></tr><tr><td align="center">5</td><td align="center">658687</td><td align="center">豆瓣吃瓜组</td><td align="center">2019-03-29</td><td align="center">168458</td><td align="center">娱乐、明星、影视、追剧、生活</td></tr><tr><td align="center">6</td><td align="center">649504</td><td align="center">花路情报局</td><td align="center">2018-11-13</td><td align="center">58578</td><td align="center">情报、女星、电视剧、电影、瓜</td></tr><tr><td align="center">7</td><td align="center">qiqier</td><td align="center">鹅们栖息地</td><td align="center">2010-07-04</td><td align="center">265009</td><td align="center">生活、八卦、影视、明星</td></tr><tr><td align="center">8</td><td align="center">lacai</td><td align="center">豆瓣拉踩小组</td><td align="center">2018-12-06</td><td align="center">55922</td><td align="center">娱乐、明星、爆料、综艺、选秀</td></tr><tr><td align="center">9</td><td align="center">650302</td><td align="center">豆瓣艾玛花园</td><td align="center">2018-11-24</td><td align="center">67215</td><td align="center">娱乐、八卦、爱马士、明星、吃瓜</td></tr><tr><td align="center">10</td><td align="center">664519</td><td align="center">豆瓣九组</td><td align="center">2019-05-31</td><td align="center">150430</td><td align="center">娱乐、八卦、生活、安利</td></tr><tr><td align="center">11</td><td align="center">654153</td><td align="center">自由小组</td><td align="center">2019-01-22</td><td align="center">68584</td><td align="center">娱乐、明星、搞笑、自由、生活</td></tr><tr><td align="center">12</td><td align="center">627382</td><td align="center">豆瓣韩娱</td><td align="center">2017-11-18</td><td align="center">74266</td><td align="center">八卦、娱乐、时尚、明星、韩娱</td></tr><tr><td align="center">13</td><td align="center">673382</td><td align="center">娱乐净土</td><td align="center">2019-09-23</td><td align="center">17013</td><td align="center">娱乐、影视、生活</td></tr><tr><td align="center">14</td><td align="center">646388</td><td align="center">豆瓣婧组、橘组</td><td align="center">2018-09-28</td><td align="center">231645</td><td align="center">青春有你2、选秀、婧组、橘组</td></tr><tr><td align="center">15</td><td align="center">ezu</td><td align="center">鹅组来了</td><td align="center">2018-04-26</td><td align="center">391773</td><td align="center">鹅组、豆瓣鹅组、八卦来了、乐明星红人、综艺影视</td></tr><tr><td align="center">16</td><td align="center">613560</td><td align="center">小象八卦</td><td align="center">2017-03-06</td><td align="center">310227</td><td align="center">闲聊、八卦、网红、淘宝、时尚</td></tr><tr><td align="center">17</td><td align="center">682809</td><td align="center">旧日议事厅</td><td align="center">2020-02-04</td><td align="center">101189</td><td align="center"></td></tr><tr><td align="center">18</td><td align="center">697689</td><td align="center">豆瓣爽组</td><td align="center">2020-06-30</td><td align="center">156781</td><td align="center">娱乐、明星、音乐、影视、时尚</td></tr><tr><td align="center">19</td><td align="center">586674</td><td align="center">生活组</td><td align="center">2016-02-12</td><td align="center">630682</td><td align="center">八卦、亲戚、吐槽</td></tr><tr><td align="center">20</td><td align="center">638298</td><td align="center">哈哈哈哈哈哈哈哈哈哈哈</td><td align="center">2018-06-01</td><td align="center">497544</td><td align="center">笑话、搞笑</td></tr><tr><td align="center">21</td><td align="center">asshole</td><td align="center">我总觉得自己就是一个傻逼</td><td align="center">2007-09-18</td><td align="center">1319749</td><td align="center">傻逼、怪癖、发泄、吐槽、奇闻</td></tr><tr><td align="center">22</td><td align="center">669481</td><td align="center">就等你上车啦！！！</td><td align="center">2019-08-04</td><td align="center">179409</td><td align="center">买、车组、618、大促、上车</td></tr><tr><td align="center">23</td><td align="center">677543</td><td align="center">「人生问题」研究社</td><td align="center">2019-11-15</td><td align="center">163737</td><td align="center">情感、婚姻、工作、职场、人际</td></tr><tr><td align="center">24</td><td align="center">myjob</td><td align="center">上班这件事</td><td align="center">2006-08-17</td><td align="center">572764</td><td align="center">上班、工作、办公室、生活、闲聊</td></tr><tr><td align="center">25</td><td align="center">652046</td><td align="center">豆瓣劝分小组</td><td align="center">2018-12-19</td><td align="center">290091</td><td align="center">情感、恋爱、八卦、吐槽、生活</td></tr></tbody></table><h3 id="topic数据"><a href="#topic数据" class="headerlink" title="topic数据"></a>topic数据</h3><p>字段名称：</p><table><thead><tr><th align="center">序号</th><th align="center">字段</th><th align="center">名称</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">group</td><td align="center">小组id</td><td align="center">发帖小组</td></tr><tr><td align="center">2</td><td align="center">topic_id</td><td align="center">话题id</td><td align="center">每个话题id</td></tr><tr><td align="center">3</td><td align="center">topic_pub_time</td><td align="center">话题时间</td><td align="center">话题第一次发布时间</td></tr><tr><td align="center">4</td><td align="center">topic_title</td><td align="center">主题名称</td><td align="center">话题发布名称</td></tr><tr><td align="center">5</td><td align="center">topic_owner</td><td align="center">楼主</td><td align="center">话题发布者,用户自定义id</td></tr><tr><td align="center">6</td><td align="center">zan</td><td align="center">点赞数</td><td align="center">话题获得点赞数</td></tr><tr><td align="center">7</td><td align="center">collect</td><td align="center">收藏数</td><td align="center">话题收藏数</td></tr><tr><td align="center">8</td><td align="center">transmit</td><td align="center">转发数</td><td align="center">话题转发数</td></tr></tbody></table><h3 id="reply数据"><a href="#reply数据" class="headerlink" title="reply数据"></a>reply数据</h3><p>字段名称：</p><table><thead><tr><th align="center">序号</th><th align="center">字段</th><th align="center">名称</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">group</td><td align="center">小组id</td><td align="center">发帖小组</td></tr><tr><td align="center">2</td><td align="center">topic_id</td><td align="center">话题id</td><td align="center">每个话题id</td></tr><tr><td align="center">3</td><td align="center">reply_id</td><td align="center">回复者id</td><td align="center">回复的用户id,原始编号</td></tr><tr><td align="center">4</td><td align="center">reply_pub_time</td><td align="center">时间</td><td align="center">回复时间</td></tr><tr><td align="center">5</td><td align="center">reply_zan</td><td align="center">点赞</td><td align="center">回复收到的点赞数</td></tr><tr><td align="center">6</td><td align="center">reply_id_2</td><td align="center">回复者id</td><td align="center">用户自定义id</td></tr></tbody></table><h3 id="user数据"><a href="#user数据" class="headerlink" title="user数据"></a>user数据</h3><p>字段名称：</p><table><thead><tr><th align="center">序号</th><th align="center">字段</th><th align="center">名称</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">user_id</td><td align="center">用户id</td><td align="center">活跃用户id</td></tr><tr><td align="center">2</td><td align="center">reg_time</td><td align="center">注册时间</td><td align="center">用户开户时间</td></tr><tr><td align="center">3</td><td align="center">location</td><td align="center">地址</td><td align="center">用户所在城市</td></tr><tr><td align="center">4</td><td align="center">group_num</td><td align="center">加入小组</td><td align="center">用户加入小组总数</td></tr><tr><td align="center">5</td><td align="center">followers</td><td align="center">粉丝数</td><td align="center">用户粉丝数</td></tr><tr><td align="center">6</td><td align="center">books</td><td align="center">读书数</td><td align="center">用户标记的读书数</td></tr><tr><td align="center">7</td><td align="center">movies</td><td align="center">观影数</td><td align="center">用户标记的观影数</td></tr><tr><td align="center">8</td><td align="center">music</td><td align="center">鉴音数</td><td align="center">用户标记的听过的专辑数</td></tr><tr><td align="center">9</td><td align="center">comment</td><td align="center">平均数</td><td align="center">用户的评论数</td></tr><tr><td align="center">10</td><td align="center">photos</td><td align="center">相册数</td><td align="center">用户创建的相册数</td></tr></tbody></table><h1 id="3-目标拆解"><a href="#3-目标拆解" class="headerlink" title="3.目标拆解"></a>3.目标拆解</h1><h2 id="关键指标定义"><a href="#关键指标定义" class="headerlink" title="关键指标定义"></a>关键指标定义</h2><ol><li><strong><em>日均活跃</em></strong>：一天内，用户在该小组有过发帖或回复行为，算作一次活跃，重复行为仅计算一次，按用户id进行去重。</li><li><strong><em>小组成员回复活跃度</em></strong>：小组活跃用户平均发言次数</li><li><strong><em>日均留存率</em></strong>：小组当天活跃人数中，在前一日同样有活跃记录者所占比例（由于是按照帖子id爬取数据，因此只能刻画基于28号、29号发布的帖子留存率）</li><li><strong><em>话题平均回复数</em></strong>：帖子平均回复数，帖子回复数越多，即成员发言意愿更强，说明小组话题质量更高</li><li><strong><em>成员重合度</em></strong>：统计A小组活跃用户中，除A小组外在其余小组中的活跃数占A小组所有活跃数的比例，该指标可以表示小组基本盘大小。</li><li><strong><em>话题质量</em></strong>：反映帖子质量的指标，如帖子平均点赞数、平均收藏数、平均转发数</li><li><strong><em>回复质量</em></strong>：反映回复质量的指标，如最赞top5平均点赞数、全部回复平均点赞数</li><li><strong><em>话题热度延续度</em></strong>：截止数据获取时，话题非当日回复数占所有回复数比例</li><li><strong><em>活跃时间段分布</em></strong>：发帖或回复的时间段</li></ol><h2 id="A-小组活跃维度"><a href="#A-小组活跃维度" class="headerlink" title="A.小组活跃维度"></a>A.小组活跃维度</h2><ol><li>各小组日均活跃人数、成员日均回复活跃度</li><li>各小组日均留存率（更准确说是28号29号发布的帖子对应的用户留存率）</li><li>各小组间成员重合度（小组基本盘大小）</li><li>用户活跃时间段分布</li></ol><h2 id="B-话题质量分析"><a href="#B-话题质量分析" class="headerlink" title="B.话题质量分析"></a>B.话题质量分析</h2><ol start="5"><li>各小组平均日发帖数、话题平均回复数</li><li>各小组帖子质量：帖子平均点赞数、平均收藏数、平均转发数</li><li>各小组回复质量：最赞top5平均点赞数、全部回复平均点赞数</li><li>各小组话题热度延续度</li></ol><h2 id="C-活跃用户画像"><a href="#C-活跃用户画像" class="headerlink" title="C.活跃用户画像"></a>C.活跃用户画像</h2><ol start="9"><li>活跃用户地理分布</li><li>小组活跃用户画像：平均加入小组数、平均豆瓣年龄、平均粉丝数、平均读书数、平均观影数、平均标记专辑数、平均相册数、平均影评数</li></ol><h1 id="4-分析和可视化"><a href="#4-分析和可视化" class="headerlink" title="4.分析和可视化"></a>4.分析和可视化</h1><h2 id="A-小组活跃维度-1"><a href="#A-小组活跃维度-1" class="headerlink" title="A.小组活跃维度"></a>A.小组活跃维度</h2><p>25个小组中，TOP活跃的小组是「豆瓣鹅组」，该小组主要是围绕娱乐、八卦话题讨论的小组，每日平均有1.2w用户参与发言，每位活跃用户每天平均发言4.41次。活跃用户人均发言次数最高的是「旧日议事厅」，为7.55次。</p><blockquote><p><strong><em>活跃用户数和用户发言次数没有明显关联，日均活跃用户数是最重要的衡量小组活跃程度的指标。</em></strong></p></blockquote><p><img src="https://i.loli.net/2021/01/06/Hr8yljJIufZC9WT.png" alt="日均活跃人数.png"><br><img src="https://i.loli.net/2021/01/06/Cmkt4UXseuO691x.png" alt="回复活跃度.png"></p><p>参与28号新帖发言的用户中仍然参与了29号新帖发言的比例最高的是「豆瓣艾玛花园」，达到0.63。从数据可知，大部分小组用户留存率均较高，说明</p><blockquote><p><strong><em>每天活跃在豆瓣各小组的用户基本都是同一批固定的用户。</em></strong></p></blockquote><p><img src="https://i.loli.net/2021/01/06/XsN7FLrT9Cb3Bay.png" alt="留存率.png"></p><ol><li>指标说明，第一行第一列的0.69，表示「豆瓣鹅组」中有69%的用户只在该组发言；</li><li>第一列第二行的0.04，表示「豆瓣鹅组」中有4%的用户在「就等你上车啦」小组中发过言；</li><li>第一行第二列的0.05，表示「就等你上车啦」小组中有5%的用户在「豆瓣鹅组」发过言；</li></ol><blockquote><p>对角线数据的大小可以衡量小组基本盘的大小，从数据可知，各小组的基本盘均较高，说明 <strong><em>豆瓣小组在一定程度上是圈地自萌，具有相同爱好的大部分活跃用户只活跃在所属社区。</em></strong></p></blockquote><p><img src="https://i.loli.net/2021/01/06/iQDbMWqC5EGuHAS.png" alt="成员重合度.png"></p><p>从用户活跃时间段来看，除了凌晨以外，其它时间段均较活跃，最活跃的是晚上21点到23点。</p><p><img src="https://i.loli.net/2021/01/06/fyUwYLNnEboKi2t.png" alt="活跃事件段.png"></p><h2 id="B-话题质量分析-1"><a href="#B-话题质量分析-1" class="headerlink" title="B.话题质量分析"></a>B.话题质量分析</h2><p>小组日发帖数最多的是「就等你上车啦」是远远高于其它小组，可能跟该小组的性质有关，车组主要是团购商品为主，对用户（特别是发帖的楼主）来说往往有利可图，故发帖数较多，其平均回复数仅为20.05，可见该小组确实存在“卖家多买家少”的情况。<br>平均回复数最多的是「豆瓣鹅组」和「小象八卦」，此两小组均为娱乐相关小组，可见  <strong>用户确实热衷于讨论八卦。</strong><br>部分小组发帖数不高但回复数高，如「豆瓣劝分小组」，推测其话题通常教具有吸引力。</p><p><img src="https://i.loli.net/2021/01/06/L4F73UOBspINQtJ.png" alt="平均回复数.png"><br><img src="https://i.loli.net/2021/01/06/kUFytMda6TnDxNR.png" alt="日发帖数.png"></p><p>从帖子质量角度来看，「哈」组绝对一骑绝尘，拥有最高的平均收藏数、转发数和点赞数，说明 <strong>大家都喜欢收藏和分享令人快乐的事物</strong>，其次是「豆瓣鹅组」。<br>从回复质量来看，「豆瓣鹅组」也是遥遥领先，平均每个回复的点赞数为30.52，TOP5（最赞）平均点赞数达301.45。</p><blockquote><p>帖子质量和回复质量是衡量小组话题讨论质量最重要的指标，质量越高越值得“围观”。</p></blockquote><p><img src="https://i.loli.net/2021/01/06/Fg3y8RGQ51OJTEr.png" alt="小组话题质量.png"></p><p>热度延续度是回复中非当日回复占全部回复的比例，其中「人生问题研究社」、「哈」组、「豆瓣劝分小组」和「上班这件事」的延续度最高，这类小组讨论话题通常是讨论人生、家庭等话题，推测因存在用户转发或豆瓣官方推荐产生“二次发布”的效果，故有大量回复并非来自当日。</p><blockquote><p>该指标可以反映豆瓣非小组重度用户感兴趣的话题（方面）。<br>可知娱乐小组的重度用户喜欢圈地自萌，但话题不容易被“推广”，经常是在同一个圈子内发酵。而人生、家庭、工作方面的小组更容易被推广，容易吸引后续用户参与讨论。<br>从产品的角度，<strong>豆瓣算法应该更多的推荐上述小组的热门话题，能吸引更多的书影音用户转化为小组用户。</strong></p></blockquote><p><img src="https://i.loli.net/2021/01/06/2melUW68EZ5GXyh.png" alt="热度延续度.png"></p><h2 id="C-活跃用户画像-1"><a href="#C-活跃用户画像-1" class="headerlink" title="C.活跃用户画像"></a>C.活跃用户画像</h2><p>从上述分析可知，日均活跃用户最多、帖子质量最高的小组是「豆瓣鹅组」，故本文继续爬取28 29号该小组活跃用户24945人的基本数据。</p><p>除去地址为空和填国外的用户，国内用户地理位置分布如下，总体上，东部和南方的活跃用户较多。</p><p><img src="https://i.loli.net/2021/01/06/lvCeopngAtmaLk3.png" alt="地理分布.png"></p><p>豆瓣鹅组活跃于用户画像数据</p><table><thead><tr><th align="center">指标</th><th align="center">平均数</th><th align="center">众数</th><th align="center">中位数</th></tr></thead><tbody><tr><td align="center">加入小组数</td><td align="center">74.8</td><td align="center">22</td><td align="center">51</td></tr><tr><td align="center">豆瓣网龄</td><td align="center">7.51</td><td align="center">9</td><td align="center">8</td></tr><tr><td align="center">粉丝数</td><td align="center">118.81</td><td align="center">2</td><td align="center">17</td></tr><tr><td align="center">读书数</td><td align="center">54.15</td><td align="center">0</td><td align="center">10</td></tr><tr><td align="center">观影数</td><td align="center">356.07</td><td align="center">0</td><td align="center">183</td></tr><tr><td align="center">专辑数</td><td align="center">53.08</td><td align="center">0</td><td align="center">2</td></tr><tr><td align="center">相册数</td><td align="center">2.28</td><td align="center">0</td><td align="center">1</td></tr></tbody></table><h1 id="5-项目总结"><a href="#5-项目总结" class="headerlink" title="5.项目总结"></a>5.项目总结</h1><p>本文从小组活跃成员维度、帖子质量维度和活跃用户画像维度分析了25个豆瓣小组的数据，分析发现，</p><blockquote><ol><li><strong>活跃用户数和用户发言次数没有明显关联</strong>;</li><li><strong>大部分小组用户留存率均较高，每天活跃在豆瓣各小组的用户基本都是同一批固定的用户</strong>;</li><li><strong>豆瓣小组在一定程度上是圈地自萌，具有相同爱好的大部分活跃用户只活跃在所属社区</strong>;</li><li><strong>大部分活跃用户热衷于讨论八卦，但对人生、家庭、事业相关话题的深度讨论更容易吸引新用户</strong>；</li><li><strong>人们乐于分享和收藏让人开心的事物</strong>；</li><li><strong>豆瓣算法应该更多的推荐上述小组的热门话题，能吸引更多的书影音用户转化为小组用户</strong>；</li><li><strong>中国东部和南方的豆瓣活跃用户更多</strong>。</li></ol></blockquote><p>需要强调的是，所有数据均基于28号29发布的帖子，并不能完整反映小组活跃程度，小组真实活跃情况应远高于本文分析结果。<br>（本文目的旨在练习数据分析思路和熟悉Python代码。）</p><h1 id="6-个人成长"><a href="#6-个人成长" class="headerlink" title="6.个人成长"></a>6.个人成长</h1><p>通过本文的实战，学会了Selenium爬虫基础，巩固了pandas编程，掌握了互联网流量类（社区类）产品的分析方法，达到了本次实战练习的目的。</p><h1 id="7-代码"><a href="#7-代码" class="headerlink" title="7.代码"></a>7.代码</h1><p>github链接</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0-项目目标&quot;&gt;&lt;a href=&quot;#0-项目目标&quot; class=&quot;headerlink&quot; title=&quot;0.项目目标&quot;&gt;&lt;/a&gt;0.项目目标&lt;/h1&gt;&lt;p&gt;作为数据分析的系列实战练习项目，本次研究的主要目的为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;熟悉Python编程，通过</summary>
      
    
    
    
    <category term="实战" scheme="http://example.com/categories/%E5%AE%9E%E6%88%98/"/>
    
    
    <category term="数据分析" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Pandas" scheme="http://example.com/tags/Pandas/"/>
    
    <category term="selenium" scheme="http://example.com/tags/selenium/"/>
    
  </entry>
  
  <entry>
    <title>数据分析思维和实战</title>
    <link href="http://example.com/2020/12/22/%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%80%9D%E7%BB%B4%E5%92%8C%E5%AE%9E%E6%88%98/"/>
    <id>http://example.com/2020/12/22/%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%80%9D%E7%BB%B4%E5%92%8C%E5%AE%9E%E6%88%98/</id>
    <published>2020-12-22T11:19:00.000Z</published>
    <updated>2021-01-16T10:00:58.084Z</updated>
    
    <content type="html"><![CDATA[<p>四星。<br>拉钩教育花木老师的课程，讲解得很具体，很适合初学者和互联网从业者，在很多思维方法上有启发，值得一看。<br><img src="https://i.loli.net/2020/12/22/chpuDavJGPifqTQ.png" alt="数据分析思维与实战.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;四星。&lt;br&gt;拉钩教育花木老师的课程，讲解得很具体，很适合初学者和互联网从业者，在很多思维方法上有启发，值得一看。&lt;br&gt;&lt;img src=&quot;https://i.loli.net/2020/12/22/chpuDavJGPifqTQ.png&quot; alt=&quot;数据分析思维与实战.</summary>
      
    
    
    
    <category term="课程笔记" scheme="http://example.com/categories/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="数据分析" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Pandas数据清洗可视化步骤</title>
    <link href="http://example.com/2020/12/20/Pandas%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97%E5%8F%AF%E8%A7%86%E5%8C%96%E6%AD%A5%E9%AA%A4(HTT%E8%87%AA%E6%88%91%E6%93%8D%E4%BD%9C%E7%89%8820210115)/"/>
    <id>http://example.com/2020/12/20/Pandas%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97%E5%8F%AF%E8%A7%86%E5%8C%96%E6%AD%A5%E9%AA%A4(HTT%E8%87%AA%E6%88%91%E6%93%8D%E4%BD%9C%E7%89%8820210115)/</id>
    <published>2020-12-19T16:00:00.000Z</published>
    <updated>2021-01-16T10:01:05.097Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-读原文件数据"><a href="#一-读原文件数据" class="headerlink" title="一.读原文件数据"></a>一.读原文件数据</h1><h2 id="1-整体读数据，再生成dataframe，速度快"><a href="#1-整体读数据，再生成dataframe，速度快" class="headerlink" title="1.整体读数据，再生成dataframe，速度快"></a>1.整体读数据，再生成dataframe，速度快</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果数据是字典型列表，列表型列表均可以使用此方法</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    lines = f.readlines()</span><br><span class="line">    str_lines = <span class="built_in">str</span>(lines).replace(<span class="string">"'"</span>, <span class="string">""</span>).replace(<span class="string">r"\n"</span>, <span class="string">""</span>)  <span class="comment"># 转为字符串，同时删除冗余字符</span></span><br><span class="line">    list_dict = <span class="built_in">eval</span>(str_lines)   <span class="comment"># 从字符串转回包含字典的列表</span></span><br><span class="line">    df = pd.DataFrame(list_dict)</span><br></pre></td></tr></tbody></table></figure><h2 id="2-按行读取，动态分配内存，速度慢"><a href="#2-按行读取，动态分配内存，速度慢" class="headerlink" title="2.按行读取，动态分配内存，速度慢"></a>2.按行读取，动态分配内存，速度慢</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此方法需要自行设置dataframe列名</span></span><br><span class="line">my_dict = {}</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    lines = f.readlines()</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        my_dict = <span class="built_in">eval</span>(line)</span><br><span class="line">        df = df.append(my_dict, ignore_index=<span class="literal">True</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="3-创建dataframe"><a href="#3-创建dataframe" class="headerlink" title="3.创建dataframe"></a>3.创建dataframe</h2><h3 id="创建空dataframe（仅列名）"><a href="#创建空dataframe（仅列名）" class="headerlink" title="创建空dataframe（仅列名）"></a>创建空dataframe（仅列名）</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_df = pd.DataFrame(columns=[<span class="string">'id'</span>, <span class="string">'domain'</span>, <span class="string">'tenant_id'</span>])</span><br></pre></td></tr></tbody></table></figure><h3 id="将字典列表转换成dataframe"><a href="#将字典列表转换成dataframe" class="headerlink" title="将字典列表转换成dataframe"></a>将字典列表转换成dataframe</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">list_dict = [{<span class="string">'id'</span>:<span class="number">1234</span>,<span class="string">'domain'</span>:<span class="string">'STR'</span>,<span class="string">'tenant_id'</span>:<span class="string">'CN'</span>},{<span class="string">'id'</span>:<span class="number">14526</span>,<span class="string">'domain'</span>:<span class="string">'EDD'</span>,<span class="string">'tenant_id'</span>:<span class="string">'SG'</span>},....]</span><br><span class="line">my_df = pd.DataFrame(list_dict)</span><br></pre></td></tr></tbody></table></figure><h3 id="从dataframe中选取一列，创建Series"><a href="#从dataframe中选取一列，创建Series" class="headerlink" title="从dataframe中选取一列，创建Series"></a>从dataframe中选取一列，创建Series</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_se = pd.Series(my_df[<span class="string">'topic_id'</span>].values, index=my_df[<span class="string">'group'</span>])</span><br></pre></td></tr></tbody></table></figure><h2 id="4-解决df中汉字编码问题"><a href="#4-解决df中汉字编码问题" class="headerlink" title="4.解决df中汉字编码问题"></a>4.解决df中汉字编码问题</h2><p>如果汉字中遭遇编码问题，可以遍历修改df中编码</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> my_df.columns:</span><br><span class="line">    <span class="keyword">if</span> my_df[col].dtype == <span class="built_in">object</span>:</span><br><span class="line">        my_df[col] = my_df[col].apply(</span><br><span class="line">            <span class="keyword">lambda</span> x: np.nan <span class="keyword">if</span> x == np.nan <span class="keyword">else</span> <span class="built_in">str</span>(x).encode(<span class="string">'utf-8'</span>, <span class="string">'replace'</span>).decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></tbody></table></figure><h1 id="二-df数据预处理"><a href="#二-df数据预处理" class="headerlink" title="二.df数据预处理"></a>二.df数据预处理</h1><h2 id="1-去重"><a href="#1-去重" class="headerlink" title="1.去重"></a>1.去重</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按列['topic_id']去重</span></span><br><span class="line">my_df1 = pd.read_csv(<span class="string">"my_df"</span>).drop_duplicates(subset=[<span class="string">'topic_id'</span>])</span><br><span class="line"><span class="comment"># 按列['topic_id', 'reply_id', 'reply_pub_time'] 去重</span></span><br><span class="line">my_df2 = pd.read_csv(<span class="string">"my_df"</span>).drop_duplicates(subset=[<span class="string">'col1'</span>, <span class="string">'col2'</span>, <span class="string">'col3'</span>])</span><br></pre></td></tr></tbody></table></figure><h2 id="2-空值处理"><a href="#2-空值处理" class="headerlink" title="2.空值处理"></a>2.空值处理</h2><h3 id="空值补0"><a href="#空值补0" class="headerlink" title="空值补0"></a>空值补0</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_df1 = my_df.fillna(<span class="number">0</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="删除空值行"><a href="#删除空值行" class="headerlink" title="删除空值行"></a>删除空值行</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># axis：0: 行操作（默认），1: 列操作</span></span><br><span class="line"><span class="comment"># how：any: 只要有空值就删除（默认），all:全部为空值才删除</span></span><br><span class="line">my_df1 = my_df.dropna(axis=<span class="number">0</span>, how=<span class="string">'any'</span>, inplace=<span class="literal">True</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="3-修改列数据格式"><a href="#3-修改列数据格式" class="headerlink" title="3.修改列数据格式"></a>3.修改列数据格式</h2><h3 id="时间格式"><a href="#时间格式" class="headerlink" title="时间格式"></a>时间格式</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">my_df[<span class="string">'dt'</span>] = pd.to_datetime(my_df[<span class="string">'dt'</span>], <span class="built_in">format</span>=<span class="string">'%Y/%m/%d'</span>)</span><br><span class="line"><span class="comment"># 也可以多列同时修改</span></span><br><span class="line">my_df[[<span class="string">'col1'</span>, <span class="string">'col2'</span>, <span class="string">'col3'</span>]] = pd.to_datetime(my_df[[<span class="string">'col1'</span>, <span class="string">'col2'</span>, <span class="string">'col3'</span>]], <span class="built_in">format</span>=<span class="string">'%Y/%m/%d'</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="去掉默认格式中的多余部分（如汉字、英文）"><a href="#去掉默认格式中的多余部分（如汉字、英文）" class="headerlink" title="去掉默认格式中的多余部分（如汉字、英文）"></a>去掉默认格式中的多余部分（如汉字、英文）</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 原始数据中含[]</span></span><br><span class="line"><span class="comment"># strip() ,去掉()中内容</span></span><br><span class="line">my_df[<span class="string">'area'</span>] = my_df[<span class="string">'area'</span>].<span class="built_in">str</span>[<span class="number">0</span>].<span class="built_in">str</span>.strip(<span class="string">'㎡'</span>).astype(<span class="built_in">float</span>)  </span><br><span class="line">my_df[<span class="string">'class'</span>] = my_df[<span class="string">'class'</span>].<span class="built_in">str</span>[<span class="number">0</span>].<span class="built_in">str</span>.strip(<span class="string">'室'</span>).astype(<span class="built_in">float</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># replace()，将()内容进行替换</span></span><br><span class="line">my_df[<span class="string">'follower'</span>] = my_df[<span class="string">'follower'</span>].<span class="built_in">str</span>.strip(<span class="string">'关注（人）'</span>).astype(<span class="built_in">float</span>)</span><br><span class="line">my_df[<span class="string">'views'</span>] = my_df[<span class="string">'views'</span>].<span class="built_in">str</span>.strip(<span class="string">'浏览（次）'</span>).replace(<span class="string">'暂无数据'</span>, <span class="string">''</span>)  </span><br></pre></td></tr></tbody></table></figure><h3 id="修改有编码问题的数据"><a href="#修改有编码问题的数据" class="headerlink" title="修改有编码问题的数据"></a>修改有编码问题的数据</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_df[<span class="string">'col'</span>] = my_df[<span class="string">'col'</span>].apply(<span class="keyword">lambda</span> x: np.nan <span class="keyword">if</span> x == np.nan <span class="keyword">else</span> <span class="built_in">str</span>(x).encode(<span class="string">'utf-8'</span>).decode(<span class="string">'unicode_escape'</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="4-列类型转换"><a href="#4-列类型转换" class="headerlink" title="4.列类型转换"></a>4.列类型转换</h2><h3 id="转为数据类型"><a href="#转为数据类型" class="headerlink" title="转为数据类型"></a>转为数据类型</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">my_df[<span class="string">'area'</span>] = my_df[<span class="string">'area'</span>].astype(<span class="built_in">float</span>)  </span><br><span class="line"><span class="comment"># 可以多列一起转换</span></span><br><span class="line">my_df[[<span class="string">'books'</span>,<span class="string">'group_num'</span>,<span class="string">'music'</span>]] = my_df[[<span class="string">'books'</span>,<span class="string">'group_num'</span>,<span class="string">'music'</span>]].apply(pd.to_numeric)</span><br><span class="line">my_df[<span class="string">'views'</span>] = my_df[<span class="string">'views'</span>].<span class="built_in">str</span>.strip(<span class="string">'浏览（次）'</span>).apply(pd.to_numeric, errors=<span class="string">'coerce'</span>)</span><br><span class="line">my_df[<span class="string">'transmit'</span>] = my_df[<span class="string">'transmit'</span>].<span class="built_in">str</span>.strip(<span class="string">'['</span>).<span class="built_in">str</span>.strip(<span class="string">']'</span>).apply(pd.to_numeric)</span><br></pre></td></tr></tbody></table></figure><h2 id="5-数据裁剪"><a href="#5-数据裁剪" class="headerlink" title="5.数据裁剪"></a>5.数据裁剪</h2><h3 id="选择时间范围数据"><a href="#选择时间范围数据" class="headerlink" title="选择时间范围数据"></a>选择时间范围数据</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_df1 = my_df[(my_df[<span class="string">'deal_dt'</span>] &lt; <span class="string">'2020-11-01'</span>) &amp; (my_df[<span class="string">'deal_dt'</span>] &gt; <span class="string">'2020-05-31'</span>)]</span><br></pre></td></tr></tbody></table></figure><h3 id="选择满足条件的行"><a href="#选择满足条件的行" class="headerlink" title="选择满足条件的行"></a>选择满足条件的行</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_df1 = my_df[(my_df[<span class="string">'type'</span>] != <span class="string">'车库'</span>) &amp; (my_df[<span class="string">'type'</span>] != <span class="string">'别墅'</span>)]</span><br><span class="line">my_df1 = my_df.loc[my_df[<span class="string">'group'</span>] == <span class="string">'blabla'</span>,[<span class="string">'col1'</span>]][<span class="string">'clo2'</span>].drop_duplicates()</span><br></pre></td></tr></tbody></table></figure><h3 id="删除满足条件的行"><a href="#删除满足条件的行" class="headerlink" title="删除满足条件的行"></a>删除满足条件的行</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_df1 = my_df.drop(my_df[(my_df[<span class="string">'group'</span>] == <span class="string">'wakao'</span>) | (my_df[<span class="string">'group'</span>] == <span class="string">'670255'</span>)].index)</span><br></pre></td></tr></tbody></table></figure><h3 id="去除无限大无限小"><a href="#去除无限大无限小" class="headerlink" title="去除无限大无限小"></a>去除无限大无限小</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clean_dataset</span>(<span class="params">df</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(df, pd.DataFrame), <span class="string">"df needs to be a pd.DataFrame"</span></span><br><span class="line">    df.dropna(inplace=<span class="literal">True</span>)  <span class="comment"># df.dropna(axis=0 , inplace=True) #不存在的值，删除整行，默认为0</span></span><br><span class="line">    indices_to_keep = ~df.isin([np.nan, np.inf, -np.inf]).<span class="built_in">any</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> df[indices_to_keep].astype(np.float64)</span><br></pre></td></tr></tbody></table></figure><h2 id="6-在原始列基础上新生列"><a href="#6-在原始列基础上新生列" class="headerlink" title="6.在原始列基础上新生列"></a>6.在原始列基础上新生列</h2><h3 id="提取时间中天、月、年"><a href="#提取时间中天、月、年" class="headerlink" title="提取时间中天、月、年"></a>提取时间中天、月、年</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">my_df[<span class="string">'deal_dt_ym'</span>] = my_df[<span class="string">'deal_dt'</span>].dt.strftime(<span class="string">'%Y%m'</span>)</span><br><span class="line">hours = my_df[<span class="string">'reply_pub_time'</span>].dt.hour.value_counts(sort=<span class="literal">False</span>)</span><br><span class="line">my_df[<span class="string">'topic_day'</span>] = my_df[<span class="string">'topic_pub_time'</span>].dt.day</span><br><span class="line">my_df[<span class="string">'deal_year'</span>] = my_df[<span class="string">'deal_dt'</span>].dt.year</span><br><span class="line">my_df[<span class="string">'deal_month'</span>] = my_df[<span class="string">'deal_dt'</span>].dt.month</span><br></pre></td></tr></tbody></table></figure><h3 id="两列数据做差"><a href="#两列数据做差" class="headerlink" title="两列数据做差"></a>两列数据做差</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">my_df[<span class="string">'used_total_diff_price'</span>] = my_df[<span class="string">'used_price'</span>] - my_df[<span class="string">'total_price'</span>]</span><br><span class="line">my_df[<span class="string">'col3'</span>] = (my_df[<span class="string">'col1'</span>] / my_df[<span class="string">'col2'</span>]).<span class="built_in">round</span>(decimals=<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 与固定数据做差</span></span><br><span class="line">my_df[<span class="string">'year_diff'</span>] = (datetime.datetime.now() - my_df[<span class="string">'build_time'</span>])/<span class="number">365.2425</span></span><br><span class="line"><span class="comment"># 与固定数的加减</span></span><br><span class="line">my_df[<span class="string">'col'</span>] = my_df[<span class="string">'col'</span>] / <span class="number">2</span> </span><br></pre></td></tr></tbody></table></figure><h3 id="求每个分组里面的均值"><a href="#求每个分组里面的均值" class="headerlink" title="求每个分组里面的均值"></a>求每个分组里面的均值</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y_ = my_df.groupby([<span class="string">'deal_dt_ym'</span>])[<span class="string">'build_diff'</span>].apply(<span class="keyword">lambda</span> g: g.mean(skipna=<span class="literal">True</span>)).dt.days.tolist()</span><br></pre></td></tr></tbody></table></figure><h3 id="原列满足条件打标生成新列（满五年，tag-1）"><a href="#原列满足条件打标生成新列（满五年，tag-1）" class="headerlink" title="原列满足条件打标生成新列（满五年，tag=1）"></a>原列满足条件打标生成新列（满五年，tag=1）</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用apply函数, years字段满足''关键词，则判断这一列赋值为1,否则为0</span></span><br><span class="line">my_df[<span class="string">'5years'</span>] = my_df[<span class="string">'years'</span>].apply(<span class="keyword">lambda</span> x: <span class="number">1</span> <span class="keyword">if</span> <span class="string">'满五年'</span> <span class="keyword">in</span> x <span class="keyword">else</span> <span class="number">0</span>)</span><br><span class="line">my_df[<span class="string">'2years'</span>] = my_df[<span class="string">'years'</span>].apply(<span class="keyword">lambda</span> x: <span class="number">1</span> <span class="keyword">if</span> <span class="string">'满两年'</span> <span class="keyword">in</span> x <span class="keyword">else</span> <span class="number">0</span>)</span><br><span class="line"><span class="comment"># 也可以使用正则</span></span><br><span class="line">my_df[<span class="string">'des'</span>] = my_df[<span class="string">'location'</span>].apply(<span class="keyword">lambda</span> x: <span class="number">0</span> <span class="keyword">if</span> <span class="built_in">len</span>(pattern.findall(x)) == <span class="number">0</span> <span class="keyword">else</span> <span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="修改列名"><a href="#修改列名" class="headerlink" title="修改列名"></a>修改列名</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_df = my_df[[<span class="string">'group'</span>,<span class="string">'topic_owner'</span>]].rename(columns={<span class="string">'topic_owner'</span>: <span class="string">'reply_id_2'</span>})</span><br></pre></td></tr></tbody></table></figure><h3 id="映射生成新列"><a href="#映射生成新列" class="headerlink" title="映射生成新列"></a>映射生成新列</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_df[<span class="string">'tenant_id'</span>] = my_df[<span class="string">'tenant_id'</span>].<span class="built_in">map</span>(tenant_id_mapping)</span><br></pre></td></tr></tbody></table></figure><h3 id="将数据分段"><a href="#将数据分段" class="headerlink" title="将数据分段"></a>将数据分段</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_df[<span class="string">'tag'</span>] = pd.cut(my_df[<span class="string">'deal_dt'</span>],[my_df[<span class="string">'deal_dt'</span>].<span class="built_in">min</span>(),pd.to_datetime(<span class="string">'2020-09-14'</span>),my_df[<span class="string">'deal_dt'</span>].<span class="built_in">max</span>()],labels=[<span class="number">0</span>,<span class="number">1</span>])</span><br></pre></td></tr></tbody></table></figure><h2 id="7-错误数据订正（人为修改数据）"><a href="#7-错误数据订正（人为修改数据）" class="headerlink" title="7.错误数据订正（人为修改数据）"></a>7.错误数据订正（人为修改数据）</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_df.loc[my_df[<span class="string">'topic_id'</span>] == <span class="string">'202721237'</span>, <span class="string">'topic_pub_time'</span>] = <span class="string">'2020-11-28 11:01:14'</span></span><br></pre></td></tr></tbody></table></figure><h3 id="重置索引"><a href="#重置索引" class="headerlink" title="重置索引"></a>重置索引</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_df_new = my_df.reset_index()</span><br></pre></td></tr></tbody></table></figure><h1 id="三、目标数据提取"><a href="#三、目标数据提取" class="headerlink" title="三、目标数据提取"></a>三、目标数据提取</h1><h2 id="1-获取某几列数据（按顺序）"><a href="#1-获取某几列数据（按顺序）" class="headerlink" title="1.获取某几列数据（按顺序）"></a>1.获取某几列数据（按顺序）</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取某列分组后的数据，生成格式为列表</span></span><br><span class="line">x = my_df.groupby(<span class="string">'col'</span>)[<span class="string">'col'</span>].unique().<span class="built_in">str</span>[<span class="number">0</span>].tolist()</span><br><span class="line"><span class="comment"># 按col列（特定顺序）分组</span></span><br><span class="line">x1 = my_df.sort_values(<span class="string">'col'</span>, ascending=<span class="literal">False</span>).groupby(<span class="string">'col'</span>)[<span class="string">'col'</span>].unique().<span class="built_in">str</span>[<span class="number">0</span>].tolist()</span><br><span class="line"><span class="comment"># 取两位小数</span></span><br><span class="line">y = my_df.sort_values(<span class="string">'col'</span>, ascending=<span class="literal">False</span>).groupby(<span class="string">'col1'</span>)[<span class="string">'col2'</span>].mean().<span class="built_in">round</span>(decimals=<span class="number">2</span>).tolist()</span><br><span class="line"><span class="comment"># 按两列顺序</span></span><br><span class="line">my_df_new = my_df.sort_values([<span class="string">'group'</span>,<span class="string">'reply_zan'</span>], ascending=[<span class="number">0</span>,<span class="number">0</span>]).groupby([<span class="string">'group'</span>,<span class="string">'topic_id'</span>]).head(<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 提取除了某几列剩余别的列</span></span><br><span class="line">X = my_df[my_df.columns.difference([ <span class="string">'tenant_id'</span>,<span class="string">'type'</span>,<span class="string">'zhuangxiu'</span>,<span class="string">'other'</span>])]</span><br></pre></td></tr></tbody></table></figure><h2 id="2-获取某分组下（武侯区）的再分组（每年）数据个数"><a href="#2-获取某分组下（武侯区）的再分组（每年）数据个数" class="headerlink" title="2.获取某分组下（武侯区）的再分组（每年）数据个数"></a>2.获取某分组下（武侯区）的再分组（每年）数据个数</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">my_df[my_df[<span class="string">'tenant_id'</span>] == <span class="string">'武侯'</span>].groupby([<span class="string">'deal_dt_ym'</span>]).count()[<span class="string">'id'</span>].tolist()</span><br><span class="line">my_df[my_df[<span class="string">'tenant_id'</span>] == <span class="string">'武侯'</span>].groupby(<span class="string">'deal_dt_ym'</span>)[<span class="string">'avg_price'</span>].mean().astype(<span class="built_in">int</span>).tolist()</span><br><span class="line"><span class="comment"># value_counts()统计该分组的每种类型个数</span></span><br><span class="line">my_df[my_df[<span class="string">'des'</span>] == <span class="number">1</span>].groupby([<span class="string">'location'</span>])[<span class="string">'location'</span>].value_counts().index.tolist()</span><br></pre></td></tr></tbody></table></figure><h2 id="3-取列的索引"><a href="#3-取列的索引" class="headerlink" title="3.取列的索引"></a>3.取列的索引</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_df[<span class="string">'tenant_id'</span>] = my_df[<span class="string">'tenant_id'</span>].sort_values().index.to_series().tolist()</span><br></pre></td></tr></tbody></table></figure><h2 id="4-比较两列关系提取行，a-b-则输出"><a href="#4-比较两列关系提取行，a-b-则输出" class="headerlink" title="4.比较两列关系提取行，a=b,则输出"></a>4.比较两列关系提取行，a=b,则输出</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将'reply_day'不等于'topic_day的行输出</span></span><br><span class="line">my_df_new = my_df.loc[my_df[<span class="string">'reply_day'</span>] != my_df[<span class="string">'topic_day'</span>],]</span><br></pre></td></tr></tbody></table></figure><h1 id="四、关联表连接"><a href="#四、关联表连接" class="headerlink" title="四、关联表连接"></a>四、关联表连接</h1><h2 id="1-inner-join"><a href="#1-inner-join" class="headerlink" title="1.inner join"></a>1.inner join</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_df3 = my_df1.merge(my_df2, left_on=[<span class="string">'group'</span>, <span class="string">'topic_id'</span>],right_on=[<span class="string">'group'</span>, <span class="string">'topic_id'</span>])</span><br></pre></td></tr></tbody></table></figure><h2 id="2-union-all"><a href="#2-union-all" class="headerlink" title="2.union all"></a>2.union all</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列名一致时是直接添加在原数据后面，列名不一致时有待验证？（在右边添加）</span></span><br><span class="line">row_concat = pd.concat([my_df1, my_df2]).drop_duplicates()</span><br></pre></td></tr></tbody></table></figure><h1 id="五-其它"><a href="#五-其它" class="headerlink" title="五.其它"></a>五.其它</h1><h2 id="groupby"><a href="#groupby" class="headerlink" title="groupby"></a>groupby</h2><h3 id="遍历groupby分组"><a href="#遍历groupby分组" class="headerlink" title="遍历groupby分组"></a>遍历groupby分组</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">my_df_groupby = my_df.groupby([<span class="string">'group'</span>, <span class="string">'reply_id_2'</span>])</span><br><span class="line">my_list_dict = defaultdict(<span class="built_in">list</span>)</span><br><span class="line"><span class="keyword">for</span> name, group <span class="keyword">in</span> my_df_groupby:</span><br><span class="line">    restore = <span class="number">1</span> <span class="keyword">if</span> <span class="built_in">set</span>(group[<span class="string">'reply_day'</span>].values.tolist()) &gt;= <span class="built_in">set</span>([<span class="number">28</span>, <span class="number">29</span>]) <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">    my_list_dict[<span class="string">'group'</span>].append(name[<span class="number">0</span>])</span><br><span class="line">    my_list_dict[<span class="string">'reply_id_2'</span>].append(name[<span class="number">1</span>])</span><br><span class="line">    my_list_dict[<span class="string">'29号留存'</span>].append(restore)</span><br></pre></td></tr></tbody></table></figure><h2 id="常用固定功能"><a href="#常用固定功能" class="headerlink" title="常用固定功能"></a>常用固定功能</h2><h3 id="交换字典key和value"><a href="#交换字典key和value" class="headerlink" title="交换字典key和value"></a>交换字典key和value</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new_group_map = {v: k <span class="keyword">for</span> k, v <span class="keyword">in</span> group_mapping.items()}</span><br></pre></td></tr></tbody></table></figure><h3 id="将Series某列数据按特定索引排序"><a href="#将Series某列数据按特定索引排序" class="headerlink" title="将Series某列数据按特定索引排序"></a>将Series某列数据按特定索引排序</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为将两个指标画到同一坐标系，需要按日均发帖小组顺序输出</span></span><br><span class="line">my_df = pd.DataFrame(used_se)</span><br><span class="line">my_df = my_df.reset_index()</span><br><span class="line">my_df[<span class="string">'group'</span>] = my_df[<span class="string">'group'</span>].astype(<span class="string">'category'</span>)</span><br><span class="line">my_df[<span class="string">'group'</span>].cat.set_categories(order_list, inplace=<span class="literal">True</span>)</span><br><span class="line">my_df.sort_values(<span class="string">'group'</span>, ascending=<span class="literal">True</span>,inplace=<span class="literal">True</span>)</span><br><span class="line">my_df.set_index([<span class="string">'group'</span>])</span><br><span class="line">my_se = pd.Series(my_df[<span class="string">'topic_id'</span>].values, index=my_df[<span class="string">'group'</span>])</span><br></pre></td></tr></tbody></table></figure><h3 id="可以追加元素append的dict"><a href="#可以追加元素append的dict" class="headerlink" title="可以追加元素append的dict"></a>可以追加元素append的dict</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_days_dict = defaultdict(<span class="built_in">list</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="计算列表A和列表B的差集"><a href="#计算列表A和列表B的差集" class="headerlink" title="计算列表A和列表B的差集"></a>计算列表A和列表B的差集</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">retA = [i <span class="keyword">for</span> i <span class="keyword">in</span> x <span class="keyword">if</span> i <span class="keyword">in</span> y]</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-读原文件数据&quot;&gt;&lt;a href=&quot;#一-读原文件数据&quot; class=&quot;headerlink&quot; title=&quot;一.读原文件数据&quot;&gt;&lt;/a&gt;一.读原文件数据&lt;/h1&gt;&lt;h2 id=&quot;1-整体读数据，再生成dataframe，速度快&quot;&gt;&lt;a href=&quot;#1-整体读</summary>
      
    
    
    
    <category term="数据分析" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
    <category term="pandas" scheme="http://example.com/tags/pandas/"/>
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>限五新政对成都二手房市场影响分析与机器学习建模</title>
    <link href="http://example.com/2020/12/18/%E3%80%90%E5%AE%9E%E6%88%98%E3%80%91%22%E9%99%90%E4%BA%94%22%E6%96%B0%E6%94%BF%E5%AF%B9%E6%88%90%E9%83%BD%E4%BA%8C%E6%89%8B%E6%88%BF%E5%B8%82%E5%9C%BA%E5%BD%B1%E5%93%8D%E5%88%86%E6%9E%90%E4%B8%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%BB%BA%E6%A8%A1/"/>
    <id>http://example.com/2020/12/18/%E3%80%90%E5%AE%9E%E6%88%98%E3%80%91%22%E9%99%90%E4%BA%94%22%E6%96%B0%E6%94%BF%E5%AF%B9%E6%88%90%E9%83%BD%E4%BA%8C%E6%89%8B%E6%88%BF%E5%B8%82%E5%9C%BA%E5%BD%B1%E5%93%8D%E5%88%86%E6%9E%90%E4%B8%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%BB%BA%E6%A8%A1/</id>
    <published>2020-12-18T12:00:00.000Z</published>
    <updated>2021-01-16T10:04:03.411Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-项目目的"><a href="#0-项目目的" class="headerlink" title="0.项目目的"></a>0.项目目的</h1><p>1.练习Python编程：通过爬虫获取链家网成都二手房成交数据，并使用Pandas包进行数据清洗、使用PyEcharts包进行绘图、使用sklearn包进行数据建模；<br>2.掌握数据分析思维和方法：分析成都房价现状、限五政策对房价的影响并建立房价影响模型，使用机器学习预测房价；<br>3.完成项目汇总，并总结过程中的经验。</p><h1 id="1-业务理解"><a href="#1-业务理解" class="headerlink" title="1.业务理解"></a>1.业务理解</h1><h2 id="二手房房价的影响因素"><a href="#二手房房价的影响因素" class="headerlink" title="二手房房价的影响因素"></a>二手房房价的影响因素</h2><p>自身因素：位置、面积、户型、层高、属性（住宅或公寓）、房屋年限、装修情况、朝向、挂牌时间、层高等<br>外部因素：交通、政策、物业费、物业口碑等</p><h2 id="成都“限五”新政"><a href="#成都“限五”新政" class="headerlink" title="成都“限五”新政"></a>成都“限五”新政</h2><p>2020.9.14 成都出台“房产新政15条” ，其中要求</p><ol><li>提高公证摇号中棚改、无房居民家庭优先的比例</li><li>发挥税收调节作用，个人住房转让增值税征免年限由2年调整到5年</li></ol><p>新规即日起执行。</p><h3 id="政策解读"><a href="#政策解读" class="headerlink" title="政策解读"></a>政策解读</h3><p>提高无房家庭优先摇号的比例有助于刚需购房者购置新房，同时将征免年限提高到5年会大大增加二手房转让的成本，猜想新政对成都二手房市场有较大冲击，购房者会更多的选择”满五“的二手房以降低税费。</p><h3 id="研究内容"><a href="#研究内容" class="headerlink" title="研究内容"></a>研究内容</h3><p>本文通过对2020年6月到10月的成都二手房成交数据的分析和建模，旨在研究成都房价现状、限五政策对房价的影响，并建立机器学习模型。</p><h1 id="2-数据爬取"><a href="#2-数据爬取" class="headerlink" title="2.数据爬取"></a>2.数据爬取</h1><p>利用Python的requests+BeautifulSoup库爬取链家网成都二手房成交数据<a href="https://cd.lianjia.com/chengjiao/">https://cd.lianjia.com/chengjiao/</a><br>时间选取2020年6月到10月数据集。<br>（仅研究成都一圈层二手房市场，即锦江、青羊、武侯、高新、成华、金牛、天府新区、高新西，共8个区）<br>数据字段：</p><table><thead><tr><th align="center">序号</th><th align="center">字段</th><th align="center">名称</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">id</td><td align="center">二手房ID</td><td align="center">12位数字</td></tr><tr><td align="center">2</td><td align="center">domain</td><td align="center">房屋属性</td><td align="center">本文均为二手房</td></tr><tr><td align="center">3</td><td align="center">tenant_id</td><td align="center">区域</td><td align="center">第一圈层共8区</td></tr><tr><td align="center">4</td><td align="center">name</td><td align="center">小区名</td><td align="center">房屋所在小区名</td></tr><tr><td align="center">5</td><td align="center">type</td><td align="center">房屋类型</td><td align="center">如普通住宅、车库等</td></tr><tr><td align="center">6</td><td align="center">deal_dt</td><td align="center">成交日期</td><td align="center">如2020.09.05</td></tr><tr><td align="center">7</td><td align="center">location</td><td align="center">所在区</td><td align="center">同tenant_id</td></tr><tr><td align="center">8</td><td align="center">sub_location</td><td align="center">二级地址</td><td align="center"></td></tr><tr><td align="center">9</td><td align="center">area</td><td align="center">面积</td><td align="center">如85.77㎡，单位平方米</td></tr><tr><td align="center">10</td><td align="center">class</td><td align="center">户型</td><td align="center">如3室</td></tr><tr><td align="center">11</td><td align="center">avg_price</td><td align="center">均价</td><td align="center">每平米平均价格（元）</td></tr><tr><td align="center">12</td><td align="center">total_price</td><td align="center">成交价</td><td align="center">如169万（万元）</td></tr><tr><td align="center">13</td><td align="center">used_price</td><td align="center">挂牌价</td><td align="center">如169（万）</td></tr><tr><td align="center">14</td><td align="center">period</td><td align="center">挂牌时长</td><td align="center">如98（天）</td></tr><tr><td align="center">15</td><td align="center">change_time</td><td align="center">调价次数</td><td align="center">如2（次）</td></tr><tr><td align="center">16</td><td align="center">introduce</td><td align="center">带看次数</td><td align="center">如19（次）</td></tr><tr><td align="center">17</td><td align="center">follower</td><td align="center">关注人数</td><td align="center">如42（人）</td></tr><tr><td align="center">18</td><td align="center">views</td><td align="center">浏览次数</td><td align="center">2152（次）</td></tr><tr><td align="center">19</td><td align="center">build_time</td><td align="center">建成年代</td><td align="center">如2014</td></tr><tr><td align="center">20</td><td align="center">zhuangxiu</td><td align="center">装修情况</td><td align="center">精装</td></tr><tr><td align="center">21</td><td align="center">show_time</td><td align="center">挂牌时间</td><td align="center">如2020-05-31</td></tr><tr><td align="center">22</td><td align="center">years</td><td align="center">是否满五</td><td align="center">如满五年</td></tr><tr><td align="center">23</td><td align="center">other</td><td align="center">房权所属</td><td align="center">如非共有、共有</td></tr></tbody></table><h1 id="3-目标拆解与建模"><a href="#3-目标拆解与建模" class="headerlink" title="3.目标拆解与建模"></a>3.目标拆解与建模</h1><h2 id="A-二手房市场现状"><a href="#A-二手房市场现状" class="headerlink" title="A.二手房市场现状"></a>A.二手房市场现状</h2><p>通过描述性分析展现房价现状</p><ol><li>各区二手房成交量（折线图堆叠，时间/数量）</li><li>各区房价及挂牌价与成交价之差走势（折线柱状混合，时间/房价）</li><li>房屋年限及满2满5占比走势（折线柱状混合，时间/天数）</li><li>各区二手房平均挂牌天数图（柱状图，时间/天数）</li><li>各区价格平均更改次数、平均带看次数（折线图堆叠，时间/天数）</li></ol><h2 id="B-二手房价格影响因素"><a href="#B-二手房价格影响因素" class="headerlink" title="B.二手房价格影响因素"></a>B.二手房价格影响因素</h2><p>自变量：</p><table><thead><tr><th align="center">序号</th><th align="center">字段</th><th align="center">名称</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">tenant_id</td><td align="center">区域（分类变量）</td></tr><tr><td align="center">2</td><td align="center">type</td><td align="center">房屋类型，住宅或公寓、别墅（分类变量）</td></tr><tr><td align="center">3</td><td align="center">area</td><td align="center">面积</td></tr><tr><td align="center">4</td><td align="center">class</td><td align="center">户型</td></tr><tr><td align="center">5</td><td align="center">period</td><td align="center">挂牌时长（天）</td></tr><tr><td align="center">6</td><td align="center">change_time</td><td align="center">调价次数</td></tr><tr><td align="center">7</td><td align="center">introduce</td><td align="center">带看次数</td></tr><tr><td align="center">8</td><td align="center">build_diff</td><td align="center">建成时长（年）</td></tr><tr><td align="center">9</td><td align="center">zhuangxiu</td><td align="center">装修情况（分类变量）</td></tr></tbody></table><p>因变量：成交平均价（每平米元）avg_price<br>模型：线性回归</p><h2 id="C-政策对房价的影响"><a href="#C-政策对房价的影响" class="headerlink" title="C.政策对房价的影响"></a>C.政策对房价的影响</h2><p>自变量：同上，增加时间虚拟变量tag（914后=1，914前=0）<br>因变量：成交平均价（每平米元）avg_price<br>模型：线性回归</p><h2 id="D-二手房房价预测"><a href="#D-二手房房价预测" class="headerlink" title="D.二手房房价预测"></a>D.二手房房价预测</h2><p>方法：机器学习之随机森林、线性回归、支持向量机<br>变量：同上，增加关注人数、带看次数、浏览次数、成交周期、调价次数、成交价</p><h1 id="4-结论与可视化"><a href="#4-结论与可视化" class="headerlink" title="4.结论与可视化"></a>4.结论与可视化</h1><h2 id="A-二手房市场现状-1"><a href="#A-二手房市场现状-1" class="headerlink" title="A.二手房市场现状"></a>A.二手房市场现状</h2><p><img src="https://i.loli.net/2020/12/18/gr6sOR12b59tPNp.png" alt="各区二手房成交量.png"></p><ol><li>在一圈层8个区中，青羊区和成华区成交量最高，高新西和天府新区成交量最低；</li><li>9月新政颁布后，除高新西区外，二手房成交量有明显下降趋势，其中，天府新区和锦江区下降幅度最大。</li></ol><blockquote><p>天府新区成交量低且新政后下降幅度最大，说明该区二手房市场并不吃香且受新政影响较大。</p></blockquote><p><img src="https://i.loli.net/2020/12/18/FLwavVfOXNI4tER.png" alt="各区房价及差价走势.png"></p><ol><li>二手房平均成交价最高的区为高新区和锦江区，最低的为高新西区和金牛区；</li><li>所有区的平均挂牌价都高于实际平均成交价，其中挂牌溢价最高的是天府新区和锦江区，挂牌价最接近实际成交价的区是高新西区和成华区；</li><li>9月新政颁布后，10月份部分区房价波动不大，如武侯和高新西区，部分区有小幅下降，其中，下降幅度最大的是锦江区，10月平均每平米下降1639元。</li></ol><blockquote><p>高新西区不仅成交量最低且平均房价也最低，说明高新西区的二手房并不受到购房者的追捧；<br>溢价最高的天府新区成交量也低，说明购房者对天府新区的二手房市场持谨慎购买的态度；<br>成交量最高的成华区的溢价不明显（挂牌价接近成交价），且平均房价处于中位，说明该区二手房市场处在良性供求关系中，性价比较高；<br>新政短期内对二手房市场呈微弱抑制作用，平均房价有小幅下降；<br>新政对溢价最高的锦江区影响最大，平均每平米下降1639元，可见新政使高溢价区的二手房价实现了价值回归。</p></blockquote><p><img src="https://i.loli.net/2020/12/18/ZD8ca4CEkLufvbY.png" alt="平均调价和带看次数.png"></p><ol><li>二手房平均调价次数最多的是金牛区，达到5.23次，调价次数最少的是锦江区，为3.28次；</li><li>带看次数最多的是青羊区，为38.59次，带看次数最多的是高新西区，为33.31次，这与成交量有关，高新西区的成交量低势必带看次数也低。</li></ol><blockquote><p>结合平均房价看，锦江区平均房价高，市场卖方占优势，故调价次数少，而金牛区则相反，平均房价低，买方占主导，故调价次数多。</p></blockquote><p><img src="https://i.loli.net/2020/12/18/MFsaPqWnR8EVHof.png" alt="房屋建成年限走势.png"></p><ol><li>9月新政颁布前，二手房平均年限稳定为11年，新政颁布后，该年限提升为12年；</li><li>新政将征免年限提高到5年后，二手房“满五”成交的比例明显上升。</li></ol><blockquote><p>数据印证了猜想，新政后购房者确实更多的选择满五年的二手房，以减少税费。</p></blockquote><p><img src="https://i.loli.net/2020/12/18/7oLa2wApnvr5xQl.png" alt="各区挂牌天数.png"></p><ol><li>各区二手房平均挂牌天数最长的高新区和天府新区，挂牌时间最短的是成华区和青羊区。</li></ol><blockquote><p>挂牌天数和成交量高度相关，成交量高的挂牌时间就短，反之成交量低的挂牌时间长。</p></blockquote><h2 id="B-二手房价格影响因素-1"><a href="#B-二手房价格影响因素-1" class="headerlink" title="B.二手房价格影响因素"></a>B.二手房价格影响因素</h2><p>根据线性回归结果，</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">avgPrice = 5.82*area+913.22*class-0.63*period-70.25*changeTime+1.94*introduce-310.87*buildDiff+3886.94*tenantIdGaoxin-5141.21*tenantIdGaoxinxi+4696.53*tenantIdJinjiang-1214.46*tenantIdJinniu+3651.31*tenantIdQingyang-134.72*tenantIdTianfuxinqu+592.20*tenantIdWuhou +4743.10*typeZhuzhai+1381.77*zhuangxiuJingzhuang+167.11*zhuangxiuMaopi+930.46*zhuangxiuOther+11991.34</span><br></pre></td></tr></tbody></table></figure><p>然而，模型的回归R-squared仅有0.457，说明模型的解释效果并不好，缺失重要的自变量。</p><h2 id="C-政策对房价的影响-1"><a href="#C-政策对房价的影响-1" class="headerlink" title="C.政策对房价的影响"></a>C.政策对房价的影响</h2><p>增加政策发生时间分类变量tag=1表示914后，为0表示914前，回归结果如下，</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">avgPrice = 95.20*tag_1+5.80*area+914.51*class-0.62*period-70.54*changeTime+1.94*introduce-311.20*buildDiff+3895.52*tenantIdGaoxin-5110.73*tenantIdGaoxinxi+4709.82*tenantIdJinjiang-1204.03*tenantIdJinniu+3653.54*tenantIdQingyang-119.33*tenantIdTianfuxinqu+601.58*tenantIdWuhou+4747.34*typeZhuzhai+1382.24*zhuangxiuJingzhuang+169.98*zhuangxiuMaopi+936.04*zhuangxiuOther+11954.10</span><br></pre></td></tr></tbody></table></figure><blockquote><p>回归结果显示tag为1的系数为正，新政颁布后的平均房价增加？对该变量进行显著性分析，P值为0.174，可见并不显著；<br>查看该模型的回归R-squared仅0.457，说明模型的解释效果并不好，缺失重要的自变量，且时间分类变量tag系数不显著，因此并不能得出新政颁布后的平均房价增加的结论。<br>结合前文二手房市场现状的分析可知，新政颁布后，部分区房价有小幅下降，总体上新政短期对二手房市场影响不显著，呈现微弱抑制效果，但不排除为季节性波动。</p></blockquote><h2 id="D-二手房房价预测-1"><a href="#D-二手房房价预测-1" class="headerlink" title="D.二手房房价预测"></a>D.二手房房价预测</h2><p>本文采用了随机森林、SVM、线性回归三种机器学习方法进行模型训练，三种模型效果如下</p><table><thead><tr><th align="center">指标</th><th align="center">随机森林</th><th align="center">线性回归</th><th align="center">SVM</th></tr></thead><tbody><tr><td align="center">R-squared</td><td align="center">0.839</td><td align="center">0.728</td><td align="center">0.717</td></tr><tr><td align="center">MSE</td><td align="center">10970641</td><td align="center">18556599</td><td align="center">19285611</td></tr><tr><td align="center">MAE</td><td align="center">2007</td><td align="center">2795</td><td align="center">2790</td></tr><tr><td align="center">RMSE</td><td align="center">3312</td><td align="center">4307</td><td align="center">4391</td></tr></tbody></table><blockquote><p>从模型评价指标来说，随机森林表现最为优异，SVM和线性回归不相上下，但是从学习曲线来看，线性回归拟合效果最好，随机森林出现过拟合。因此该二手房成交房价预测模型适合用线性回归建模。</p></blockquote><p><img src="https://i.loli.net/2020/12/18/TCWXkQBs4fjJRve.png" alt="E0945CA4-102D-4A44-B64B-924FDAFC4E9D.png"><br><img src="https://i.loli.net/2020/12/18/gs6qvfMzbRYOwL2.png" alt="线性模型学习曲线.png"></p><h1 id="5-项目总结"><a href="#5-项目总结" class="headerlink" title="5.项目总结"></a>5.项目总结</h1><h2 id="研究结论"><a href="#研究结论" class="headerlink" title="研究结论"></a>研究结论</h2><p>2020.9.14 成都出台“房产新政15条”，本文通过对2020年6月到10月的成都一圈层8个区二手房成交数据的分析和建模，发现</p><ol><li>天府新区成交量低、溢价高且新政后成交量下降幅度最大，说明该区二手房市场并不吃香且受新政影响较大，购房者对天府新区的二手房持谨慎购买的态度。</li><li>成交量最高的成华区的溢价不明显（挂牌价接近成交价），且平均房价处于中位，说明该区二手房市场处在良性供求关系中，在8个区中性价比较高；</li><li>高新西区不仅成交量最低且平均房价也最低，说明高新西区的二手房并不受到购房者的追捧。</li><li>新政对溢价最高的锦江区影响最大，平均每平米下降1639元，说明新政使高溢价区的二手房价实现了价值回归。</li><li>新政短期内对对二手房市场影响不显著，呈微弱抑制效果，平均房价有小幅下降。</li></ol><h2 id="个人成长"><a href="#个人成长" class="headerlink" title="个人成长"></a>个人成长</h2><p>通过本项目的练习，我更加熟悉了Python编程，特别是在Pandas、PyEcharts有显著进步，对sklearn也更了解；同时掌握了基本的数据分析方法和步骤。通过此研究，完成了成都二手房房价现状以及新政对房价影响的研究并形成了文档总结，总体来说收获颇丰。</p><h1 id="6-代码"><a href="#6-代码" class="headerlink" title="6.代码"></a>6.代码</h1><p>github</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0-项目目的&quot;&gt;&lt;a href=&quot;#0-项目目的&quot; class=&quot;headerlink&quot; title=&quot;0.项目目的&quot;&gt;&lt;/a&gt;0.项目目的&lt;/h1&gt;&lt;p&gt;1.练习Python编程：通过爬虫获取链家网成都二手房成交数据，并使用Pandas包进行数据清洗、使用PyE</summary>
      
    
    
    
    <category term="实战" scheme="http://example.com/categories/%E5%AE%9E%E6%88%98/"/>
    
    
    <category term="数据分析" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Pandas" scheme="http://example.com/tags/Pandas/"/>
    
    <category term="Requests" scheme="http://example.com/tags/Requests/"/>
    
  </entry>
  
  <entry>
    <title>Python数据分析：活用Pandas库</title>
    <link href="http://example.com/2020/11/18/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%9APython%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%EF%BC%9A%E6%B4%BB%E7%94%A8Pandas%E5%BA%93/"/>
    <id>http://example.com/2020/11/18/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%9APython%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%EF%BC%9A%E6%B4%BB%E7%94%A8Pandas%E5%BA%93/</id>
    <published>2020-11-18T07:28:00.000Z</published>
    <updated>2021-01-16T10:00:10.402Z</updated>
    
    <content type="html"><![CDATA[<p>四星。<br>这是本值得至少看两遍的pandas入门书籍，对新手很友好，内容上基本涵盖了初学者需要掌握的内容。对易错点和重点内容讲解也较细，是可以用作Pandas教材的一本书。唯一的不足是章节之间的组织逻辑还可以再优化。</p><p><img src="https://i.loli.net/2020/11/18/XmOBb2FvjD8C1Pq.png" alt="活用Pandas库.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;四星。&lt;br&gt;这是本值得至少看两遍的pandas入门书籍，对新手很友好，内容上基本涵盖了初学者需要掌握的内容。对易错点和重点内容讲解也较细，是可以用作Pandas教材的一本书。唯一的不足是章节之间的组织逻辑还可以再优化。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i</summary>
      
    
    
    
    <category term="读书笔记" scheme="http://example.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="数据分析" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Pandas" scheme="http://example.com/tags/Pandas/"/>
    
  </entry>
  
  <entry>
    <title>数据分析与可视化讲解</title>
    <link href="http://example.com/2020/11/13/%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96%E8%AE%B2%E8%A7%A3/"/>
    <id>http://example.com/2020/11/13/%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96%E8%AE%B2%E8%A7%A3/</id>
    <published>2020-11-13T03:56:00.000Z</published>
    <updated>2021-01-16T10:01:01.661Z</updated>
    
    <content type="html"><![CDATA[<p>Date: 2020-11-13 11:56</p><p>三星。<br>内容主要围绕PyEcharts框架结合案例进行讲解，重要突出可视化部分；第一个模块也讲解了数据分析的方法体系和流程、步骤，对比了狭义的数据分析和数据挖掘的区别和联系；最后一个模块是PyEcharts+Flask框架进行数据分布。总的来说学习后可以对PyEcharts框架有一定的了解。</p><p>学习笔记：</p><h1 id="第一节-什么是数据分析可视化"><a href="#第一节-什么是数据分析可视化" class="headerlink" title="第一节 什么是数据分析可视化"></a>第一节 什么是数据分析可视化</h1><p>数据分析与数据挖掘<br><img src="https://i.loli.net/2020/11/13/w3rph87yedSYiIz.png" alt="数据分析与数据挖掘.png"><br>数据可视化分析<br><img src="https://i.loli.net/2020/11/13/ZPSk6nfsJ3XgcYV.png" alt="数据可视化分析.png"><br>常用的数据分析图表<br><img src="https://i.loli.net/2020/11/13/UlehGEtKSF7di9y.png" alt="常用数据分析表‘.png"></p><h1 id="第二节-数据可视化分析的方法体系"><a href="#第二节-数据可视化分析的方法体系" class="headerlink" title="第二节 数据可视化分析的方法体系"></a>第二节 数据可视化分析的方法体系</h1><h2 id="四大目标"><a href="#四大目标" class="headerlink" title="四大目标"></a>四大目标</h2><p>数据分析可视化是围绕业务问题解决的过程，分为4个环节：呈现业务、发现问题、分析问题、定位原因。</p><h3 id="呈现业务"><a href="#呈现业务" class="headerlink" title="呈现业务"></a>呈现业务</h3><p>包括实时的业务数据、数据历史的变化趋势、数据的空间分布和数据构成分布等，为发现业务问题打好基础</p><h3 id="发现异常"><a href="#发现异常" class="headerlink" title="发现异常"></a>发现异常</h3><p>包括对⽐差异、时间变化趋势、空间分布和构成结构上的异常等，都属于异常。这⼀环节可以⼈⼯完成，也可以系统⾃动完成，⼀般的数据可视化系统都会集成异常数据监控能⼒（即异常预警）。</p><h3 id="分析问题"><a href="#分析问题" class="headerlink" title="分析问题"></a>分析问题</h3><p>通过时间维度、空间维度、结构维度和关系维度，分析引起异常的可能原因，并进⾏逐⼀验证。</p><h3 id="定位原因"><a href="#定位原因" class="headerlink" title="定位原因"></a>定位原因</h3><p>基于数据表现，制定对应的产品和运营策略，通过A/B测试的模式，来验证假设，对于分析问题过程中的推论进⾏业务验证，从⽽发现根本原因。例如，当你发现商品的价格因素可能是导致销量下降的原因的时候，可以通过适当的降价/促销等营销活动，来验证这个假设是否成⽴。</p><h2 id="常用工作方法"><a href="#常用工作方法" class="headerlink" title="常用工作方法"></a>常用工作方法</h2><p>专家法、参照法、归纳法、混合法<br>围绕业务进⾏分析，服务于业务、解决业务问题，是该⼯作必须坚持的核⼼原则</p><h2 id="七大操作流程"><a href="#七大操作流程" class="headerlink" title="七大操作流程"></a>七大操作流程</h2><h3 id="1-业务理解"><a href="#1-业务理解" class="headerlink" title="1.业务理解"></a>1.业务理解</h3><h3 id="2-定义指标"><a href="#2-定义指标" class="headerlink" title="2.定义指标"></a>2.定义指标</h3><p>业务⼝径<br>计算逻辑，业务指标的技术⼝径，对应完整的SQL查询语句和对应的聚合逻辑<br>权限控制</p><h3 id="3-定义维度（即分析维度）"><a href="#3-定义维度（即分析维度）" class="headerlink" title="3.定义维度（即分析维度）"></a>3.定义维度（即分析维度）</h3><p>常⻅的分析维度包括对⽐维度、分布维度、构成维度和关系维度等</p><h3 id="4-设计呈现"><a href="#4-设计呈现" class="headerlink" title="4.设计呈现"></a>4.设计呈现</h3><p>基于已定义的指标和维度，设计⻚⾯布局、选择可视图表、设计主题样式和数据交互模式，进⾏数据可视化呈现的过程。该步骤的核⼼在于可视化图表的选择，常⻅的可视化图表包括：折线图、柱状图、散点图等，每个图表适⽤的场景不同。</p><h3 id="5-程序设计（即可视化落地）"><a href="#5-程序设计（即可视化落地）" class="headerlink" title="5.程序设计（即可视化落地）"></a>5.程序设计（即可视化落地）</h3><h3 id="6-数据发布"><a href="#6-数据发布" class="headerlink" title="6.数据发布"></a>6.数据发布</h3><h3 id="7-分析洞察"><a href="#7-分析洞察" class="headerlink" title="7.分析洞察"></a>7.分析洞察</h3><p>基于构建的数据可视化图表，进⾏问题发现、问题分析和定位原因的过程</p><h1 id="第三节-数据分析可视化的两类技术"><a href="#第三节-数据分析可视化的两类技术" class="headerlink" title="第三节 数据分析可视化的两类技术"></a>第三节 数据分析可视化的两类技术</h1><p><img src="https://i.loli.net/2020/11/13/XsQNVcm6AtuEwIH.png" alt="数据分析可视化的两类技术.png"></p><h2 id="Readsh核心功能"><a href="#Readsh核心功能" class="headerlink" title="Readsh核心功能"></a>Readsh核心功能</h2><h3 id="数据源管理"><a href="#数据源管理" class="headerlink" title="数据源管理"></a>数据源管理</h3><h3 id="SQL即席查询"><a href="#SQL即席查询" class="headerlink" title="SQL即席查询"></a>SQL即席查询</h3><h3 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h3><h3 id="数据仪表盘"><a href="#数据仪表盘" class="headerlink" title="数据仪表盘"></a>数据仪表盘</h3><p>Ubuntu环境下安装，Redash的核⼼价值在于SQL查询和报表设计，如果不考虑交互体验，其核⼼功能满⾜80%的需求，是没问题的。且Redash的仪表盘⽀持定时刷新机制</p><h1 id="第四节-Echarts数据可视化基础"><a href="#第四节-Echarts数据可视化基础" class="headerlink" title="第四节 Echarts数据可视化基础"></a>第四节 Echarts数据可视化基础</h1><p>Echarts是⼀个开源的、免费的、成熟的、商业级的图表可视化框架，它基于JavaScript语⾔开发，是国内使⽤最多和最为⼴泛的可视化图表框架之⼀。是事实上的⾏业标准。主要优势有：</p><h3 id="图表类型丰富"><a href="#图表类型丰富" class="headerlink" title="图表类型丰富"></a>图表类型丰富</h3><h3 id="主题样式美观"><a href="#主题样式美观" class="headerlink" title="主题样式美观"></a>主题样式美观</h3><h3 id="源码开源免费"><a href="#源码开源免费" class="headerlink" title="源码开源免费"></a>源码开源免费</h3><h3 id="⽂档教程完备"><a href="#⽂档教程完备" class="headerlink" title="⽂档教程完备"></a>⽂档教程完备</h3><h3 id="技术社区活跃"><a href="#技术社区活跃" class="headerlink" title="技术社区活跃"></a>技术社区活跃</h3><h3 id="Echarts的导入"><a href="#Echarts的导入" class="headerlink" title="Echarts的导入"></a>Echarts的导入</h3><p>使⽤Echarts图表组件库之前，需要引⼊对应的JavaScript库⽂件。⽂件的引⼊⽅式有本地引⼊和远程引⼊。本地引⼊是需要把Echarts库⽂件下载到本地服务器，远程引⼊是通过⽹络⽅式，引⼊第三⽅提供的Echarts⽂件，⽤得最多的就是由百度提供Echarts库⽂件</p><h2 id="Echarts开发步骤"><a href="#Echarts开发步骤" class="headerlink" title="Echarts开发步骤"></a>Echarts开发步骤</h2><p>Echarts图表开发的过程主要分为四个步骤：</p><h3 id="1-Echarts⽂件引⼊"><a href="#1-Echarts⽂件引⼊" class="headerlink" title="1.Echarts⽂件引⼊"></a>1.Echarts⽂件引⼊</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>&lt;head&gt;</span><br><span class="line"><span class="number">2.</span>&lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line"><span class="number">3.</span>&nbsp;&nbsp;&lt;!--&nbsp;引⼊&nbsp;echarts.js&nbsp;--&gt;</span><br><span class="line">4.&nbsp;&nbsp;&lt;script src="https://cdn.staticfile.org/echarts/4.3.0/echarts.min.js"&gt;&lt;/script &gt;&nbsp; # 远程导入</span><br><span class="line"><span class="number">5.</span>&lt;/head&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="2-HTML-DOM对象声明"><a href="#2-HTML-DOM对象声明" class="headerlink" title="2.HTML DOM对象声明"></a>2.HTML DOM对象声明</h3><p>定义⼀个HTML DOM对象，⽤来作为Echarts图表元素的容器.对象声明就是声明⼀个带有ID属性的占位符DIV，占位符名称为：”container”，并且赋予了⼀个⾼度属性。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>&lt;div&nbsp;id=<span class="string">"container"</span>&nbsp;style=<span class="string">"height:&nbsp;100%"</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><p>接下来，我们需要完成的⼯作是** Echarts对象绑定**，绑定的代码只有⼀⾏</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.</span><span class="keyword">var</span>&nbsp;dom&nbsp;=&nbsp;<span class="built_in">document</span>.getElementById(<span class="string">"container"</span>);</span><br></pre></td></tr></tbody></table></figure><p>上述代码，实现了⻚⾯元素”container”与JavaScript变量dom之间的关系绑定，完成对象绑定后，<br>对于变量操作，可以直接作⽤到对应的⻚⾯对象上</p><h3 id="3-图表对象初始化"><a href="#3-图表对象初始化" class="headerlink" title="3.图表对象初始化"></a>3.图表对象初始化</h3><p>⾸先声明了⼀个变量dom，完成⻚⾯元素与Javascript变量之间的关联，然后创建⼀个Echarts图表对象myChart，并进⾏初始化</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>&lt;script&nbsp;type=<span class="string">"text/javascript"</span>]]&gt;</span><br><span class="line"><span class="number">2.</span><span class="keyword">var</span>&nbsp;dom&nbsp;=&nbsp;<span class="built_in">document</span>.getElementById(<span class="string">"container"</span>);</span><br><span class="line"><span class="number">3.</span><span class="keyword">var</span>&nbsp;myChart&nbsp;=&nbsp;echarts.init(dom);</span><br><span class="line"><span class="number">4.</span><span class="keyword">var</span>&nbsp;app&nbsp;=&nbsp;{};</span><br></pre></td></tr></tbody></table></figure><h3 id="4-参数设置"><a href="#4-参数设置" class="headerlink" title="4.参数设置"></a>4.参数设置</h3><p>接下来进⾏myChart图表对象的参数设置，其中option是图表的参数对象，其中xAxis、yAxis代表坐标轴x和y轴的设置，series代表的是图表的数值系列。此处为了简化程序的复杂度，我们把option属性参数写成了固定内容，实际⼯作中，需要根据业务需求进⾏数据内容的替换。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5.</span>option&nbsp;=&nbsp;<span class="literal">null</span>;</span><br><span class="line"><span class="number">6.</span>option&nbsp;=&nbsp;{</span><br><span class="line"><span class="number">7.</span>&nbsp;&nbsp;&nbsp;&nbsp;xAxis:&nbsp;{</span><br><span class="line"><span class="number">8.</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type:&nbsp;<span class="string">'category'</span>,</span><br><span class="line"><span class="number">9.</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data:&nbsp;[<span class="string">'Mon'</span>,&nbsp;<span class="string">'Tue'</span>,&nbsp;<span class="string">'Wed'</span>,&nbsp;<span class="string">'Thu'</span>,&nbsp;<span class="string">'Fri'</span>,&nbsp;<span class="string">'Sat'</span>,&nbsp;<span class="string">'Sun'</span>]</span><br><span class="line"><span class="number">10.</span>&nbsp;&nbsp;&nbsp;&nbsp;},</span><br><span class="line"><span class="number">11.</span>&nbsp;&nbsp;&nbsp;&nbsp;yAxis:&nbsp;{</span><br><span class="line"><span class="number">12.</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type:&nbsp;<span class="string">'value'</span></span><br><span class="line"><span class="number">13.</span>&nbsp;&nbsp;&nbsp;&nbsp;},</span><br><span class="line"><span class="number">14.</span>&nbsp;&nbsp;&nbsp;&nbsp;series:&nbsp;[{</span><br><span class="line"><span class="number">15.</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data:&nbsp;[<span class="number">120</span>,&nbsp;<span class="number">200</span>,&nbsp;<span class="number">150</span>,&nbsp;<span class="number">80</span>,&nbsp;<span class="number">70</span>,&nbsp;<span class="number">110</span>,&nbsp;<span class="number">130</span>],</span><br><span class="line"><span class="number">16.</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type:&nbsp;<span class="string">'bar'</span>,</span><br><span class="line"><span class="number">17.</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showBackground:&nbsp;<span class="literal">true</span>,</span><br><span class="line"><span class="number">18.</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;backgroundStyle:&nbsp;{</span><br><span class="line"><span class="number">19.</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;<span class="string">'rgba(220,&nbsp;220,&nbsp;220,&nbsp;0.8)'</span></span><br><span class="line"><span class="number">20.</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span><br><span class="line"><span class="number">21.</span>&nbsp;&nbsp;&nbsp;&nbsp;}]</span><br><span class="line"><span class="number">22.</span>};</span><br><span class="line"><span class="number">23.</span>;</span><br><span class="line"><span class="number">24.</span><span class="keyword">if</span>&nbsp;(option&nbsp;&amp;&amp;&nbsp;<span class="keyword">typeof</span>&nbsp;option&nbsp;===&nbsp;<span class="string">"object"</span>)&nbsp;{</span><br><span class="line"><span class="number">25.</span>&nbsp;&nbsp;&nbsp;&nbsp;myChart.setOption(option,&nbsp;<span class="literal">true</span>);</span><br><span class="line"><span class="number">26.</span>}</span><br><span class="line"><span class="number">27.</span>&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><h1 id="第五节-PyEcharts数据可视化环境"><a href="#第五节-PyEcharts数据可视化环境" class="headerlink" title="第五节 PyEcharts数据可视化环境"></a>第五节 PyEcharts数据可视化环境</h1><p>PyEcharts是Echarts数据可视化框架，在Python开发语⾔环境下的实现版本，借助PyEcharts，开发者可<br>以使⽤Python语⾔直接⽣成可视化图表。PyEcharts的特点：<br>基于Python语⾔设计<br>图表类型丰富<br>源码开源免费：PyEcharts是⼀个开源项⽬，可以免费⽤于商业⽤途。<br>⽂档教程健全<br>Web集成⽅便：PyEcharts可以很轻松地和Flask、Django等Web框架整合，以Web⻚⾯的⽅式呈现，便于跨团队、跨部⻔、跨地域的合作和分享。</p><h2 id="PyEcharts配置"><a href="#PyEcharts配置" class="headerlink" title="PyEcharts配置"></a>PyEcharts配置</h2><p>PyEcharts的配置主要是图表的参数设置，内容包括图表的提示框组件参数、图例组件参数、⼯具箱组件参数、X轴组件参数、Y轴组件参数、数据缩放组件参数、视图效果组件参数和主题样式参数，配置好的参数最终体现在可视化的图表中，⼀个典型的图表参数与⻚⾯呈现图表地对应关系，如下图所示：<br><img src="https://i.loli.net/2020/11/13/Vz6egFmIftLq1MO.png" alt="PyEcharts配置.png"></p><h2 id="PyEcharts开发过程"><a href="#PyEcharts开发过程" class="headerlink" title="PyEcharts开发过程"></a>PyEcharts开发过程</h2><p>PyEcharts图表开发的过程主要分为四个步骤：PyEcharts图表组件引⼊、图表对象声明、图表对象参数设置、图表对象渲染。</p><h3 id="1-PyEcharts图表组件引⼊"><a href="#1-PyEcharts图表组件引⼊" class="headerlink" title="1.PyEcharts图表组件引⼊"></a>1.PyEcharts图表组件引⼊</h3><p>如，在源码中，引⼊PyEcharts柱状图组件<br>from pyecharts.charts import Bar</p><h3 id="2-图表对象声明"><a href="#2-图表对象声明" class="headerlink" title="2.图表对象声明"></a>2.图表对象声明</h3><p>然后是引⼊柱状图组件，完成图表对象的声明，如</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>bar = Bar()</span><br></pre></td></tr></tbody></table></figure><p>上述代码通过类Bar声明了⼀个柱状图图表组件的实例对象：bar。</p><h3 id="3-图表对象参数设置"><a href="#3-图表对象参数设置" class="headerlink" title="3.图表对象参数设置"></a>3.图表对象参数设置</h3><p>完成对象的声明以后，接下来需要进⾏参数配置，具体的代码如下所示</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span><span class="comment">#参数设置：x轴数据</span></span><br><span class="line"><span class="number">2.</span>bar.add_xaxis([<span class="string">"衬衫"</span>,<span class="string">"⽺⽑衫"</span>,<span class="string">"雪纺衫"</span>,<span class="string">"裤⼦"</span>,<span class="string">"⾼跟鞋"</span>,<span class="string">"袜⼦"</span>])</span><br><span class="line"><span class="number">3.</span><span class="comment">#参数设置：y轴数据</span></span><br><span class="line"><span class="number">4.</span>bar.add_yaxis(<span class="string">"商家A"</span>, [<span class="number">5</span>,<span class="number">20</span>,<span class="number">36</span>,<span class="number">10</span>,<span class="number">75</span>,<span class="number">90</span>])</span><br></pre></td></tr></tbody></table></figure><p>上述代码分别设置了柱状图图表对象的x轴数据和y轴数据</p><h3 id="4-图表对象渲染"><a href="#4-图表对象渲染" class="headerlink" title="4.图表对象渲染"></a>4.图表对象渲染</h3><p>参数设置完成以后，就是最后⼀步：图表对象渲染。图表对象的渲染只需要⼀⾏代码，具体的代码如</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="comment">#图表渲染：默认⽂件命：render.html,默认路径：当前⽬录</span></span><br><span class="line"><span class="number">2.</span>bar.render()</span><br></pre></td></tr></tbody></table></figure><p>PyEcharts图表组件的渲染，在不添加任何参数的情况下，默认会在Python程序⽂件当前⽬录下，⽣成⼀个名为：render.html的HTML⻚⾯⽂件。</p><h1 id="第六节-PyEcharts开发快速入门"><a href="#第六节-PyEcharts开发快速入门" class="headerlink" title="第六节 PyEcharts开发快速入门"></a>第六节 PyEcharts开发快速入门</h1><p>PyEcharts⽀持的图表类型有30多种，具体的图表数量和版本相关</p><h2 id="PyEcharts基本图表"><a href="#PyEcharts基本图表" class="headerlink" title="PyEcharts基本图表"></a>PyEcharts基本图表</h2><p><img src="https://i.loli.net/2020/11/13/xBK3LuznWXhUjtP.png" alt="PyEcharts基本图表.png"></p><h2 id="PyEcharts配置-1"><a href="#PyEcharts配置-1" class="headerlink" title="PyEcharts配置"></a>PyEcharts配置</h2><p>PyEcharts配置项分全局配置项和系列配置项，其中全局配置项作⽤域为整个图表（与具体需要呈现的数据内容⽆关），可以理解为静态部分；系列配置项作⽤范围为基于数据动态绘制的部分。<br>全局配置项<br><img src="https://i.loli.net/2020/11/13/4a2QKuzdF7iGVsO.png" alt="PyEcharts全局配置项.png"></p><h3 id="1-初始化配置项"><a href="#1-初始化配置项" class="headerlink" title="1.初始化配置项"></a>1.初始化配置项</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span><span class="keyword">from</span>&nbsp;pyecharts&nbsp;<span class="keyword">import</span>&nbsp;options&nbsp;<span class="keyword">as</span>&nbsp;opts</span><br><span class="line"><span class="number">2.</span><span class="keyword">from</span>&nbsp;pyecharts.charts&nbsp;<span class="keyword">import</span>&nbsp;Bar</span><br><span class="line"><span class="number">3.</span><span class="keyword">from</span>&nbsp;pyecharts.faker&nbsp;<span class="keyword">import</span>&nbsp;Faker</span><br><span class="line"><span class="number">4.</span><span class="keyword">from</span>&nbsp;pyecharts.<span class="built_in">globals</span>&nbsp;<span class="keyword">import</span>&nbsp;ThemeType</span><br><span class="line"><span class="number">5.</span>c&nbsp;=&nbsp;(</span><br><span class="line"><span class="number">6.</span>&nbsp;&nbsp;&nbsp;&nbsp;Bar(init_opts=opts.InitOpts(theme=ThemeType.LIGHT,</span><br><span class="line"><span class="number">7.</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width=<span class="string">"1024px"</span>,</span><br><span class="line"><span class="number">8.</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height=<span class="string">"600px"</span>,</span><br><span class="line"><span class="number">9.</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bg_color=<span class="string">"#d9d6c3"</span></span><br><span class="line"><span class="number">10.</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;))</span><br><span class="line"><span class="number">11.</span>&nbsp;&nbsp;&nbsp;&nbsp;.add_xaxis(Faker.choose())</span><br><span class="line"><span class="number">12.</span>&nbsp;&nbsp;&nbsp;&nbsp;.add_yaxis(<span class="string">"商家A"</span>,&nbsp;Faker.values())</span><br><span class="line"><span class="number">13.</span>&nbsp;&nbsp;&nbsp;&nbsp;.add_yaxis(<span class="string">"商家B"</span>,&nbsp;Faker.values())</span><br><span class="line"><span class="number">14.</span>&nbsp;&nbsp;&nbsp;&nbsp;.render(<span class="string">"demo_bar_01.html"</span>)</span><br><span class="line"><span class="number">15.</span>)</span><br></pre></td></tr></tbody></table></figure><p>通过opts.InitOpts类声明了⼀个初始化配置项对象init_opts，初始化配置项参数按照key = value的⽅式，进⾏了赋值操作。其中：theme代表主题样式，可选的范围我会在本课后⾯的“主题样式”⼩节进⾏详细介绍；width和height分别代表图表对象在⽹⻚中的宽度和⾼度；bg_color代表图表背景颜⾊，具体的⾊值，可以根据⾃⼰的需要选择。</p><h3 id="2-标题配置项"><a href="#2-标题配置项" class="headerlink" title="2.标题配置项"></a>2.标题配置项</h3><p>负责配置图表对象的标题内容，包括主标题⽂本、主标题链接、主标题链接打开⽅式；副标题⽂本、副标题链接、副标题链接打开⽅式；标题元素的位置和边距等。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span><span class="keyword">from</span>&nbsp;pyecharts&nbsp;<span class="keyword">import</span>&nbsp;options&nbsp;<span class="keyword">as</span>&nbsp;opts</span><br><span class="line"><span class="number">2.</span><span class="keyword">from</span>&nbsp;pyecharts.charts&nbsp;<span class="keyword">import</span>&nbsp;Bar</span><br><span class="line"><span class="number">3.</span><span class="keyword">from</span>&nbsp;pyecharts.faker&nbsp;<span class="keyword">import</span>&nbsp;Faker</span><br><span class="line"><span class="number">4.</span>c&nbsp;=&nbsp;(</span><br><span class="line"><span class="number">5.</span>&nbsp;&nbsp;&nbsp;&nbsp;Bar()</span><br><span class="line"><span class="number">6.</span>&nbsp;&nbsp;&nbsp;&nbsp;.add_xaxis(Faker.choose())</span><br><span class="line"><span class="number">7.</span>&nbsp;&nbsp;&nbsp;&nbsp;.add_yaxis(<span class="string">"商家A"</span>,&nbsp;Faker.values())</span><br><span class="line"><span class="number">8.</span>&nbsp;&nbsp;&nbsp;&nbsp;.add_yaxis(<span class="string">"商家B"</span>,&nbsp;Faker.values())</span><br><span class="line"><span class="number">9.</span>&nbsp;&nbsp;&nbsp;&nbsp;.set_global_opts(</span><br><span class="line"><span class="number">10.</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title_opts=opts.TitleOpts(title=<span class="string">"图表标题"</span>,</span><br><span class="line"><span class="number">11.</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title_link=<span class="string">"www.baidu.com"</span>,</span><br><span class="line"><span class="number">12.</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title_target=<span class="string">"blank"</span>,</span><br><span class="line"><span class="number">13.</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subtitle=<span class="string">"图表副标题"</span>,</span><br><span class="line"><span class="number">14.</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subtitle_link=<span class="string">"www.baidu.com"</span>,</span><br><span class="line"><span class="number">15.</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subtitle_target=<span class="string">"blank"</span>,</span><br><span class="line"><span class="number">16.</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pos_left=<span class="string">"left"</span>,</span><br><span class="line"><span class="number">17.</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">#&nbsp;pos_right="",</span></span><br><span class="line"><span class="number">18.</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">#&nbsp;pos_bottom="40",</span></span><br><span class="line"><span class="number">19.</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;padding=[<span class="number">5</span>,&nbsp;<span class="number">10</span>,&nbsp;<span class="number">5</span>,&nbsp;<span class="number">10</span>])&nbsp;&nbsp;&nbsp;<span class="comment">#&nbsp;上右下左</span></span><br><span class="line"><span class="number">20.</span>&nbsp;&nbsp;&nbsp;&nbsp;)</span><br><span class="line"><span class="number">21.</span>&nbsp;&nbsp;&nbsp;&nbsp;.render(<span class="string">"demo_bar_02.html"</span>)</span><br><span class="line"><span class="number">22.</span>)</span><br></pre></td></tr></tbody></table></figure><p>通过opt.TitleOptions⽅法声明了⼀个标题配置项对象，标题配置项参数按照Key = value的⽅式，进⾏了赋值操作。其中：title、title_url、title_target定义了主标题⽂本、主标题链接、主标题打开⽅式；subtitle、subtitle_url、subtitle_target定义了副标题⽂本、副标题链接和副标题打开⽅式，其他参数可以参照官⽅提供的⽤户⼿册关于标题配置项的参数进⾏设定。</p><h2 id="PyEcharts图表渲染"><a href="#PyEcharts图表渲染" class="headerlink" title="PyEcharts图表渲染"></a>PyEcharts图表渲染</h2><p>PyEcharts图表渲染⽀持两种模式：<br>1.HTML⻚⾯模式和图⽚⽂件模式。默认情况下，PyEcharts图表渲染，是在当前⽂件夹下，⽣成⼀个名称为：render.html的HTML⽂件<br>2.渲染为图⽚的时候需要额外的第三⽅程序包⽀持，包名：selenium，可以通过执⾏：pip install selenium执⾏安装。渲染为图⽚的时候，需要⽤的函数为：make_snapshot</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span><span class="keyword">from</span>&nbsp;pyecharts.charts&nbsp;<span class="keyword">import</span>&nbsp;Bar</span><br><span class="line"><span class="number">2.</span><span class="comment">#&nbsp;导出图⽚，需要引⼊以下对象</span></span><br><span class="line"><span class="number">3.</span><span class="keyword">from</span>&nbsp;pyecharts.render&nbsp;<span class="keyword">import</span>&nbsp;make_snapshot</span><br><span class="line"><span class="number">4.</span><span class="keyword">from</span>&nbsp;snapshot_selenium&nbsp;<span class="keyword">import</span>&nbsp;snapshot</span><br><span class="line"><span class="number">5.</span>bar&nbsp;=&nbsp;Bar()</span><br><span class="line"><span class="number">6.</span>bar.add_xaxis([<span class="string">"衬衫"</span>,&nbsp;<span class="string">"⽺⽑衫"</span>,&nbsp;<span class="string">"雪纺衫"</span>,&nbsp;<span class="string">"裤⼦"</span>,&nbsp;<span class="string">"⾼跟鞋"</span>,&nbsp;<span class="string">"袜⼦"</span>])</span><br><span class="line"><span class="number">7.</span>bar.add_yaxis(<span class="string">"商家A"</span>,&nbsp;[<span class="number">5</span>,&nbsp;<span class="number">20</span>,&nbsp;<span class="number">36</span>,&nbsp;<span class="number">10</span>,&nbsp;<span class="number">75</span>,&nbsp;<span class="number">90</span>])</span><br><span class="line"><span class="number">8.</span><span class="comment">#&nbsp;render&nbsp;会⽣成本地&nbsp;HTML&nbsp;⽂件，默认会在当前⽬录⽣成&nbsp;render.html&nbsp;⽂件</span></span><br><span class="line"><span class="number">9.</span><span class="comment">#&nbsp;也可以传⼊路径参数，如&nbsp;bar.render("mycharts.html")</span></span><br><span class="line"><span class="number">10.</span><span class="comment">#&nbsp;默认模式</span></span><br><span class="line"><span class="number">11.</span>bar.render()</span><br><span class="line"><span class="number">12.</span><span class="comment">#&nbsp;指定路径</span></span><br><span class="line"><span class="number">13.</span>bar.render(<span class="string">"mycharts.html"</span>) <span class="comment">#第一种方法</span></span><br><span class="line"><span class="number">14.</span><span class="comment">#&nbsp;渲染成图⽚</span></span><br><span class="line"><span class="number">15.</span>make_snapshot(snapshot,&nbsp;bar.render(),&nbsp;<span class="string">"bar0.png"</span>)&nbsp; <span class="comment">#第二种方法</span></span><br></pre></td></tr></tbody></table></figure><h2 id="PyEcharts主题样式"><a href="#PyEcharts主题样式" class="headerlink" title="PyEcharts主题样式"></a>PyEcharts主题样式</h2><p>主题样式可以根据⾃⼰的业务场景和个⼈偏好选择，但要遵循⼀个基本的原则：美观⼤⽅、颜⾊鲜明、对⽐清晰。</p><h1 id="第七节-实时监控数据指标卡"><a href="#第七节-实时监控数据指标卡" class="headerlink" title="第七节 实时监控数据指标卡"></a>第七节 实时监控数据指标卡</h1><p>数据指标卡多⽤于业务实时监控，⽤来呈现核⼼的业务指标，通过呈现实时的指标值，结合指标的同⽐和环⽐变化情况，判断该指标的是否处于正常的波动范围之内。很多时候，我们不⽌需要了解当前的值和同环⽐变化情况，还要快速跳转到该指标的历史变化趋势上。<br><img src="https://i.loli.net/2020/11/13/8hMRDlbB1IE7cSJ.png" alt="数据可视化分析操作流程.png"></p><h2 id="业务理解"><a href="#业务理解" class="headerlink" title="业务理解"></a>业务理解</h2><p>需要从业务流程、业务规则、业务活动和总线矩阵这4个⽅⾯梳理</p><h2 id="定义指标"><a href="#定义指标" class="headerlink" title="定义指标"></a>定义指标</h2><p>实时数据监控需要监控的是核⼼业务指标</p><h2 id="定义维度"><a href="#定义维度" class="headerlink" title="定义维度"></a>定义维度</h2><p>除了核⼼指标的实时数值之外，通常需要结合指标的同⽐、环⽐、时间进度和任务⽬标完成状态等因素。因此，实时数据监控该指标卡，需要考虑的分析维度主要是时间维度和对⽐维度。</p><h2 id="设计呈现"><a href="#设计呈现" class="headerlink" title="设计呈现"></a>设计呈现</h2><p>数据指标卡的设计，需要考虑⻚⾯布局、卡⽚设计、主题样式，尤其是字体、字号和颜⾊的设计。通常情况下，数据指标卡，位于数据仪表盘的顶部，横向并⾏排列，超出部分另起⼀⾏。<br><img src="https://i.loli.net/2020/11/13/JQxmaDn84GTWsVY.png" alt="指标卡设计呈现.png"></p><h2 id="程序开发"><a href="#程序开发" class="headerlink" title="程序开发"></a>程序开发</h2><h3 id="1-数据理解"><a href="#1-数据理解" class="headerlink" title="1.数据理解"></a>1.数据理解</h3><h3 id="2-数据准备（数据库逻辑、数据表查找）"><a href="#2-数据准备（数据库逻辑、数据表查找）" class="headerlink" title="2.数据准备（数据库逻辑、数据表查找）"></a>2.数据准备（数据库逻辑、数据表查找）</h3><h3 id="3-图表设计"><a href="#3-图表设计" class="headerlink" title="3.图表设计"></a>3.图表设计</h3><p>图表设计包括前端模板设计和后台服务程序设计两部分，前端模板设计完成组件库的导⼊、xxx元素占位符声明和图表元素渲染，后台服务程序完成路由设计、业务逻辑和数据逻辑设计。<br>前端模板设计：<br>数据指标卡的程序设计，包括引⼊Bootstrap4框架、声明指标卡对象和配置指标卡参数。<br>后台设计：<br>接⼝设计：定义了前端的⻚⾯的调度请求地址。具体结合框架Flask，数据指标卡的程序设计后台部分，需要使⽤到 Flask 框架 。<br>路由设计：提供了服务器端的业务逻辑和访问接⼝的映射关系。具体结合框架Flask<br>业务逻辑：定义了前端请求的响应逻辑。负责响应⽤户实时指标的查询请求，调⽤数据逻辑程序，基于<br>数据逻辑查询的结果，业务逻辑程序组装出实时指标数据并返回给前端⻚⾯。<br>数据逻辑：执⾏数据库表的查询操作。负责从数据准备环节⽣成的数据⽇报中查询交易量、交易额和库存量指标，并返回给调⽤程序。</p><h3 id="4-数据验证"><a href="#4-数据验证" class="headerlink" title="4.数据验证"></a>4.数据验证</h3><p>通常的数据验证策略是：⾸先判定指标是否符合业务预期，其次判定趋势是否合理，最后判定组成结构和分布是否合理。</p><h2 id="数据发布"><a href="#数据发布" class="headerlink" title="数据发布"></a>数据发布</h2><p>实时数据监控指标卡，通常作为Dashboard⻚⾯的最突出的⼀部分，通常以⽹⻚的形式呈现。</p><h2 id="分析洞察"><a href="#分析洞察" class="headerlink" title="分析洞察"></a>分析洞察</h2><h1 id="第八节-趋势变化分析可视化"><a href="#第八节-趋势变化分析可视化" class="headerlink" title="第八节 趋势变化分析可视化"></a>第八节 趋势变化分析可视化</h1><p>实时监控数据指标卡⽤于呈现业务和发现业务问题，⼀旦发现指标异常，就需要引⼊多个不同的维度，对问题进⾏分析和判断。时间维度，即该指标的历史趋势，是要⾸先考虑的。<br>历史趋势分析问题的价值在于：⼀⽅⾯，进⼀步判断该异常是否在合理的范围之内；另外⼀⽅⾯，判断该异常是否具有周期性的特征。同时，历史数据变化趋势图，也可以⽤于发展趋势预测。</p><p>通过数据可视化的⽅式，呈现业务指标的历史变化趋势；通过业务指标曲线的平滑程度和总体变化趋势，呈现该指标是否异常和指标的总体变化趋势。 历史数据变化趋势图的价值在于，对历史业务状态的呈现，以及基于历史状态趋势判断当前实时数据是否符合预期，基于线性回归预测下⼀个阶段的指标变化等<br>通常采用：<br>折线图<br>面积图</p><h2 id="业务理解-1"><a href="#业务理解-1" class="headerlink" title="业务理解"></a>业务理解</h2><h2 id="定义指标-1"><a href="#定义指标-1" class="headerlink" title="定义指标"></a>定义指标</h2><p>历史数据变化趋势图，可以⽤来呈现任何需要的、具有时间序列特征的指标。具体的指标可以基于业务需求选择。</p><h2 id="定义维度-1"><a href="#定义维度-1" class="headerlink" title="定义维度"></a>定义维度</h2><p>历史数据变化趋势的核⼼是：呈现指标随时间变化的趋势。</p><h2 id="设计呈现-1"><a href="#设计呈现-1" class="headerlink" title="设计呈现"></a>设计呈现</h2><p>历史数据变化趋势图，位于数据仪表盘数据指标卡的下⽅，单图成⾏或者横向并⾏排列，超出的部分另起⼀⾏。<br><img src="https://i.loli.net/2020/11/13/IJjlkK28brNoc3h.png" alt="趋势图设计呈现.png"></p><h2 id="程序开发-1"><a href="#程序开发-1" class="headerlink" title="程序开发"></a>程序开发</h2><h3 id="1-数据理解-1"><a href="#1-数据理解-1" class="headerlink" title="1.数据理解"></a>1.数据理解</h3><h3 id="2-数据准备"><a href="#2-数据准备" class="headerlink" title="2.数据准备"></a>2.数据准备</h3><h3 id="3-图标设计"><a href="#3-图标设计" class="headerlink" title="3.图标设计"></a>3.图标设计</h3><p>本节使用PyEcharts框架⽣成单⻚⾯的可视化图表。<br>图表设计包括数据查询和图表创建两个部分。数据查询实现与MySQL数据库建⽴连接、读取数据和格式化输出（Pymysql.cursors）；图表创建包括⽂件导⼊、对象声明、参数配置和⻚⾯渲染。</p><p>PyEcharts图表程序设计部分需要完成4个步骤：⽂件导⼊、对象声明、参数配置和⻚⾯渲染。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span><span class="comment">#⽂件导⼊</span></span><br><span class="line"><span class="number">2.</span><span class="keyword">from</span>&nbsp;pyecharts&nbsp;<span class="keyword">import</span>&nbsp;options&nbsp;<span class="keyword">as</span>&nbsp;opts</span><br><span class="line"><span class="number">3.</span><span class="keyword">import</span>&nbsp;pymysql.cursors</span><br><span class="line"><span class="number">4.</span><span class="keyword">from</span>&nbsp;pyecharts.charts&nbsp;<span class="keyword">import</span>&nbsp;Line</span><br><span class="line"><span class="number">5.</span><span class="comment">#&nbsp;执⾏主函数</span></span><br><span class="line"><span class="number">6.</span><span class="keyword">if</span>&nbsp;__name__&nbsp;==&nbsp;<span class="string">'__main__'</span>:</span><br><span class="line"><span class="number">7.</span>&nbsp;&nbsp;&nbsp;&nbsp;print(order_sum_query())</span><br><span class="line"><span class="number">8.</span><span class="comment">#数据查询</span></span><br><span class="line"><span class="number">9.</span>&nbsp;&nbsp;&nbsp;&nbsp;dataX,&nbsp;dataY&nbsp;=&nbsp;order_sum_query()</span><br><span class="line"><span class="number">10.</span><span class="comment">#对象声明</span></span><br><span class="line"><span class="number">11.</span>&nbsp;&nbsp;&nbsp;&nbsp;line&nbsp;=&nbsp;Line()</span><br><span class="line"><span class="number">12.</span>&nbsp;&nbsp;&nbsp;&nbsp;line.add_xaxis(dataX)</span><br><span class="line"><span class="number">13.</span>&nbsp;&nbsp;&nbsp;&nbsp;line.add_yaxis(<span class="string">"订单量"</span>,&nbsp;dataY,&nbsp;is_smooth=<span class="literal">True</span>)</span><br><span class="line"><span class="number">14.</span>&nbsp;&nbsp;&nbsp;&nbsp;line.set_global_opts(&nbsp; &nbsp; &nbsp;  <span class="comment">#参数设置</span></span><br><span class="line"><span class="number">15.</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title_opts=opts.TitleOpts(title=<span class="string">"⽇订单量历史数据趋势图"</span>),</span><br><span class="line"><span class="number">16.</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yaxis_opts=opts.AxisOpts(</span><br><span class="line"><span class="number">17.</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type_=<span class="string">"value"</span>,</span><br><span class="line"><span class="number">18.</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;axistick_opts=opts.AxisTickOpts(is_show=<span class="literal">True</span>),</span><br><span class="line"><span class="number">19.</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;splitline_opts=opts.SplitLineOpts(is_show=<span class="literal">True</span>),</span><br><span class="line"><span class="number">20.</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;),</span><br><span class="line"><span class="number">21.</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xaxis_opts=opts.AxisOpts(type_=<span class="string">"category"</span>,&nbsp;boundary_gap=<span class="literal">False</span>)</span><br><span class="line"><span class="number">22.</span>&nbsp;&nbsp;&nbsp;&nbsp;)</span><br><span class="line"><span class="number">23.</span>&nbsp;&nbsp;&nbsp;&nbsp;line.render(&nbsp;) <span class="comment">#页面渲染</span></span><br></pre></td></tr></tbody></table></figure><h3 id="4-数据验证-1"><a href="#4-数据验证-1" class="headerlink" title="4.数据验证"></a>4.数据验证</h3><h2 id="数据发布-1"><a href="#数据发布-1" class="headerlink" title="数据发布"></a>数据发布</h2><h2 id="分析洞察-1"><a href="#分析洞察-1" class="headerlink" title="分析洞察"></a>分析洞察</h2><p>历史数据变化趋势图的分析⽅法，是通过数据可视化曲线的平滑程度和总体变化趋势进⾏判断。判断的基本逻辑是：是否有异常点出现，变化趋势是平滑向上还是平滑向下。</p><h1 id="第九节-构成分析可视化"><a href="#第九节-构成分析可视化" class="headerlink" title="第九节 构成分析可视化"></a>第九节 构成分析可视化</h1><p>指标的构成元素模型，其价值在于，从⽬标指标的构成结构上，发现各构成元素的构成⽐例，从⽽发现对⽬标指标影响最⼤的构成元素。<br>⼀个基本的商品构成图，在Echarts标准图表库中，通常采⽤基本饼状图或环形图的来呈现，也可以是二者的组合图，这样的组合不仅能展示每种商品类型的⽐例，还能更加详细地展示每⼀种商品类型的⼦类型产品的⽐例，能让你更加详细地了解商品类型的组成分布。</p><h2 id="步骤同上"><a href="#步骤同上" class="headerlink" title="步骤同上"></a>步骤同上</h2><h1 id="第十节-地理位置分布图可视化"><a href="#第十节-地理位置分布图可视化" class="headerlink" title="第十节 地理位置分布图可视化"></a>第十节 地理位置分布图可视化</h1><p>客户地址位置分布⼀⽅⾯可以评估客户营销的效果，另外⼀⽅⾯可以辅助寻找最有价值的客户地理分布，从⽽辅助决策营销策略的优化和调整。<br><img src="https://i.loli.net/2020/11/13/TfKFCjG4SeoMdsE.png" alt="地理位置分布设计呈现.png"><br>根据统计维度的层级不同，可以展示不同层级下的客户位置信息分布情况，⽐如从全球层⾯来看每个国家的客户数量、某个国家的客户数量、某个国家的某个地区的客户数量，层层对⽐下可以找出客户数量的分布在每个层级的分布情况以及差异。</p><h1 id="第十一节-柱状图可视化"><a href="#第十一节-柱状图可视化" class="headerlink" title="第十一节 柱状图可视化"></a>第十一节 柱状图可视化</h1><p>柱状图的变形和延伸表现形式图表有簇状条形图和堆积条形图等，⼆者有时也被称为：簇状图和堆积图，或者簇型柱状图和堆积柱状图。</p><h2 id="步骤同上-1"><a href="#步骤同上-1" class="headerlink" title="步骤同上"></a>步骤同上</h2><h1 id="第十二节-雷达图可视化"><a href="#第十二节-雷达图可视化" class="headerlink" title="第十二节 雷达图可视化"></a>第十二节 雷达图可视化</h1><p>雷达图，⼜称蜘蛛⽹图，通常适⽤于三个或者更多维度的变量。雷达图以在同⼀点开始的轴上显示的三个，或者更多个变量的⼆维图表的形式，来展示多元数据。</p><p>雷达图通常⽤来查看哪些变量具有相似的值、变量之间是否有异常值、变量在数据集内分布的⾼低，以及排名、评估、评论等数据的展示。</p><h2 id="步骤同上-2"><a href="#步骤同上-2" class="headerlink" title="步骤同上"></a>步骤同上</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Date: 2020-11-13 11:56&lt;/p&gt;
&lt;p&gt;三星。&lt;br&gt;内容主要围绕PyEcharts框架结合案例进行讲解，重要突出可视化部分；第一个模块也讲解了数据分析的方法体系和流程、步骤，对比了狭义的数据分析和数据挖掘的区别和联系；最后一个模块是PyEcharts+</summary>
      
    
    
    
    <category term="课程学习" scheme="http://example.com/categories/%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="可视化" scheme="http://example.com/tags/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    <category term="PyEcharts" scheme="http://example.com/tags/PyEcharts/"/>
    
  </entry>
  
  <entry>
    <title>Selenium自动化测试</title>
    <link href="http://example.com/2020/11/11/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%9ASelenium%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    <id>http://example.com/2020/11/11/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%9ASelenium%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/</id>
    <published>2020-11-11T05:51:00.000Z</published>
    <updated>2021-01-16T10:00:51.524Z</updated>
    
    <content type="html"><![CDATA[<p>Date: 2021-01-11 13:51</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本书侧重于讲解基于 Selenium 开源程序的网络爬虫方面的自动化技术。<br>Selenium 项目最早是为了测试浏览器、网页而诞生的，而在大数据的时代，Selenium 则被广泛应用于网络爬虫。</p><p>如果要选择 web 方面的自动化工具的话， selenium 应该作为首选（一个支持多种浏览器，多种操作系统，多种编程语言的工具，恐怕没有什么比它更合适了）。</p><h1 id="Selenium基础"><a href="#Selenium基础" class="headerlink" title="Selenium基础"></a>Selenium基础</h1><h2 id="安装Selenium"><a href="#安装Selenium" class="headerlink" title="安装Selenium"></a>安装Selenium</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></tbody></table></figure><h2 id="安装Webdriver"><a href="#安装Webdriver" class="headerlink" title="安装Webdriver"></a>安装Webdriver</h2><h2 id=""><a href="#" class="headerlink" title=""></a></h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入 selenuim 库</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver </span><br><span class="line"><span class="comment">#下面一行代码用于启动 Chrome 浏览器</span></span><br><span class="line">driver = webdriver.Chrome()</span><br></pre></td></tr></tbody></table></figure><h2 id="打开页面"><a href="#打开页面" class="headerlink" title="打开页面"></a>打开页面</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入 selenuim 库和键盘操作</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver </span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys </span><br><span class="line"><span class="comment">#打开 Chrome 浏览器</span></span><br><span class="line">driver = webdriver.Chrome() </span><br><span class="line"><span class="comment">#打开百度页面</span></span><br><span class="line">driver.get(<span class="string">"https://baidu.com"</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="可以设置打开页面的大小"><a href="#可以设置打开页面的大小" class="headerlink" title="可以设置打开页面的大小"></a>可以设置打开页面的大小</h3><p>默认打开窗口较小</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置打开页面的长和宽</span></span><br><span class="line">driver.set_window_size(<span class="number">800</span>, <span class="number">480</span>)</span><br><span class="line"><span class="comment">#最大化</span></span><br><span class="line">driver.maximize_window()</span><br></pre></td></tr></tbody></table></figure><h2 id="浏览器基本操作-前进、后退、刷新和关闭"><a href="#浏览器基本操作-前进、后退、刷新和关闭" class="headerlink" title="浏览器基本操作:前进、后退、刷新和关闭"></a>浏览器基本操作:前进、后退、刷新和关闭</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入 selenium 库和时间库</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver </span><br><span class="line"><span class="keyword">import</span> time </span><br><span class="line"><span class="comment">#打开浏览器和百度页面</span></span><br><span class="line">driver = webdriver.Chrome() </span><br><span class="line">driver.get(<span class="string">"https://baidu.com"</span>) </span><br><span class="line"><span class="comment">#在停留两秒后打开百度新闻</span></span><br><span class="line">time.sleep(<span class="number">2</span>) </span><br><span class="line">driver.get(<span class="string">"http://news.baidu.com"</span>) </span><br><span class="line"><span class="comment">#在停留两秒后后退</span></span><br><span class="line">time.sleep(<span class="number">2</span>) </span><br><span class="line">driver.back() </span><br><span class="line"><span class="comment">#在停留两秒后前进</span></span><br><span class="line">time.sleep(<span class="number">2</span>) </span><br><span class="line">driver.forward() </span><br><span class="line"><span class="comment">#在停留两秒后刷新</span></span><br><span class="line">time.sleep(<span class="number">2</span>) </span><br><span class="line">driver.refresh() </span><br><span class="line"><span class="comment">#在停留两秒后关闭浏览器</span></span><br><span class="line">time.sleep(<span class="number">2</span>) </span><br><span class="line">driver.quit()</span><br></pre></td></tr></tbody></table></figure><h2 id="滑动页面"><a href="#滑动页面" class="headerlink" title="滑动页面"></a>滑动页面</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">driver.get(<span class="string">"https://baidu.com"</span>) </span><br><span class="line"><span class="comment">#停留两秒</span></span><br><span class="line">time.sleep(<span class="number">2</span>) </span><br><span class="line"><span class="comment">#执行 JavaScript 代码</span></span><br><span class="line">JS=<span class="string">"window.scrollTo(10000,document.body.scrollHeight)"</span> </span><br><span class="line">driver.execute_script(JS) </span><br><span class="line"><span class="comment">#停留两秒后退出</span></span><br><span class="line">time.sleep(<span class="number">2</span>) </span><br><span class="line">driver.quit()</span><br></pre></td></tr></tbody></table></figure><h2 id="调用Cookie"><a href="#调用Cookie" class="headerlink" title="调用Cookie"></a>调用Cookie</h2><p>常用cookie的方法</p><blockquote><p>get_cookies(): 获得所有 cookie 信息。<br>delete_all_cookies():删除所有 cookie 信息。<br>get_cookie([name])：返回字典的 key 为[name]的 cookie<br>add_cookie(cookie_dict):添加 cookie。“cookie_dict”指字典对象，必须有 name 和<br>value 两个值。<br>delete_cookie([name],[optionsString]):删除 cookie 信息。[name]是要删除的 cookie<br>的名称。第二个参数[optionsString]是 cookie 选项，目前支持的选项包括“路径”，<br>“域”</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">driver.get(<span class="string">"https://www.baidu.com/"</span>) </span><br><span class="line"><span class="comment">#这里通过查找元素实现搜索</span></span><br><span class="line">driver.find_element_by_id(<span class="string">"kw"</span>).send_keys(<span class="string">"selenium"</span>) </span><br><span class="line">driver.find_element_by_id(<span class="string">"su"</span>).click() </span><br><span class="line"><span class="comment">#获取所有 cookie </span></span><br><span class="line">cookies=driver.get_cookies() </span><br><span class="line"><span class="comment">#返回字典的 key 为的 BAIDUID 的 cookie</span></span><br><span class="line">cookie=driver.get_cookie(<span class="string">"BAIDUID"</span>) </span><br><span class="line">print(cookies) </span><br><span class="line">print(cookie) </span><br><span class="line"><span class="comment">#删除所有 cookie 信息。</span></span><br><span class="line">driver.delete_all_cookies() </span><br><span class="line"><span class="comment">#退出</span></span><br><span class="line">driver.quit()</span><br></pre></td></tr></tbody></table></figure><h2 id="打开多个窗口"><a href="#打开多个窗口" class="headerlink" title="打开多个窗口"></a>打开多个窗口</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8 </span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver </span><br><span class="line"><span class="keyword">import</span> time </span><br><span class="line"><span class="comment">#打开浏览器，窗口最大化</span></span><br><span class="line">driver=webdriver.Chrome() </span><br><span class="line">driver.maximize_window() <span class="comment"># </span></span><br><span class="line">driver.get(<span class="string">"http://baidu.com"</span>) </span><br><span class="line"><span class="comment">#停留两秒后打开搜狗搜索</span></span><br><span class="line">time.sleep(<span class="number">2</span>) </span><br><span class="line">JS1=<span class="string">'window.open("https://www.sogou.com");'</span> </span><br><span class="line">driver.execute_script(JS1)   <span class="comment">#在当前窗口/框架 同步执行JavaScript</span></span><br><span class="line"><span class="comment">#停留两秒后打开有道翻译</span></span><br><span class="line">time.sleep(<span class="number">2</span>) </span><br><span class="line">JS2=<span class="string">'window.open("https://fanyi.youdao.com/");'</span> </span><br><span class="line">driver.execute_script(JS2) </span><br><span class="line"><span class="comment">#退出</span></span><br><span class="line"><span class="comment">#driver.quit()</span></span><br></pre></td></tr></tbody></table></figure><h1 id="元素定位"><a href="#元素定位" class="headerlink" title="元素定位"></a>元素定位</h1><p>HTML元素就是 HTML 文件的一个基本组成单元，HTML 元素涵盖的内容包括但不仅限于：文字、图片、音频、动画、视频。<br>Selenium 提供了 8 种定位方式。</p><blockquote><p>ID<br>name<br>class name<br>tag name<br>link text<br>partial link text<br>xpath<br>css selector</p></blockquote><p>这 8 种定位方式在 Python selenium 中所对应的方法为：</p><blockquote><p>find_element_by_id() <strong>推荐</strong><br>find_element_by_name()<br>find_element_by_class_name()<br>find_element_by_tag_name()<br>find_element_by_link_text()<br>find_element_by_partial_link_text()<br>find_element_by_xpath() <strong>推荐</strong><br>find_element_by_css_selector()</p></blockquote><h2 id="1-根据ID定位-推荐）"><a href="#1-根据ID定位-推荐）" class="headerlink" title="1.根据ID定位(推荐）"></a>1.根据ID定位(推荐）</h2><p>带有特定 ID 值的 HTML元素可以被 CSS（Cascading Style Sheets，层叠样式表）样式选择器和 JavaScript 脚本查找到。<br>一般为了便于区分在 <strong>HTML 页面中是不会设置 ID 相同的 HTML 元素</strong>。并且 HTML元素 ID 如果重名，也有相当严重的后果。</p><p>这里是百度的搜索框的代码：<br><code>&lt;input type="text" class="s_ipt" name="wd" id="kw" maxlength="100" autocomplete="off"&gt; </code><br>重点在这里，ID=”kw”，好，我们就从这里知道了，百度搜索框的 ID 为 kw，以后，我们就可以找到这个 ID 了。<br>再来看一下搜索确认按钮的 ID：<br><code>&lt;input type="submit" value="百度一下" id="su" class="btn self-btn bg s_btn"&gt; </code><br>通过上面这段代码我们可以看到，ID=”su”，那么，万事具备了。我们来进行一个实际操作。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入库</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver </span><br><span class="line"><span class="keyword">import</span> time </span><br><span class="line"><span class="comment">#打开浏览器和打开百度</span></span><br><span class="line">driver=webdriver.Chrome() </span><br><span class="line">driver.get(<span class="string">"https://www.baIDu.com/"</span>) </span><br><span class="line"><span class="comment">#通过 ID 查找，然后输入，并点击</span></span><br><span class="line">driver.find_element_by_id(<span class="string">"kw"</span>).send_keys(<span class="string">"selenium"</span>)  <span class="comment">#send_key()是一个方法，意思是向搜索框发出特定的字符串</span></span><br><span class="line">driver.find_element_by_id(<span class="string">"su"</span>).click() <span class="comment">#click()是一个方法，用于向某个特定的HTML元素发送确认请求</span></span><br><span class="line"><span class="comment">#退出浏览器</span></span><br><span class="line">driver.quit()</span><br></pre></td></tr></tbody></table></figure><h2 id="2-根据Name定位"><a href="#2-根据Name定位" class="headerlink" title="2.根据Name定位"></a>2.根据Name定位</h2><p>ID 就像是一个人的身份证号码，而 Name 就像是他的名字，ID 的值显然是唯一的，而 Name 的值却是可以重复的<br>我们用 find_element_by_name()来实现刚才的功能，再来看以下刚才的代码，搜索框中的代码存在：<br><code>&lt;input type="text" class="s_ipt" name="wd" id="kw" maxlength="100" autocomplete="off"&gt; </code><br>这个 HTML 标签有个一个属性——name=”wd”，很明显，这个 wd 就是我们所需要查找的。<br>我们考虑这一行代码来实现相同的功能：<br><code>driver.find_element_by_name("wd") </code><br>因为点击按钮所在的 HTML 标签并不存在 name 属性，所以我们无法通过查找 name 属性来找到这个元素。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过 name 查找，然后输入</span></span><br><span class="line">driver.find_element_by_name(<span class="string">"wd"</span>).send_keys(<span class="string">"selenium"</span>) </span><br><span class="line"><span class="comment">#通过 id 查找并点击</span></span><br><span class="line">driver.find_element_by_id(<span class="string">"su"</span>).click() </span><br><span class="line">time.sleep(<span class="number">2</span>) </span><br><span class="line"><span class="comment">#退出浏览器</span></span><br><span class="line">driver.quit()</span><br></pre></td></tr></tbody></table></figure><h2 id="3-根据XPath定位-推荐）"><a href="#3-根据XPath定位-推荐）" class="headerlink" title="3.根据XPath定位(推荐）"></a>3.根据XPath定位(推荐）</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">driver.get(<span class="string">"https://www.baidu.com/"</span>) </span><br><span class="line"><span class="comment">#通过 XPath 查找，然后输入</span></span><br><span class="line">driver.find_element_by_xpath(<span class="string">r'//*[@id="kw"]'</span>).send_keys(<span class="string">"selenium"</span>)  <span class="comment"># 使用 r’’来转义，单引号和XPath的双引号区分</span></span><br><span class="line"><span class="comment">#通过 id 查找并点击</span></span><br><span class="line">driver.find_element_by_id(<span class="string">"su"</span>).click() </span><br><span class="line">time.sleep(<span class="number">2</span>) </span><br><span class="line"><span class="comment">#退出浏览器</span></span><br><span class="line">driver.quit()     </span><br></pre></td></tr></tbody></table></figure><h3 id="获取html标签中的href元素"><a href="#获取html标签中的href元素" class="headerlink" title="获取html标签中的href元素"></a>获取html标签中的href元素</h3><p><code>driver.find_element_by_xpath(r'//*[@id="g-side-info"]/div[1]/div/a').get_attribute('href')</code></p><h2 id="4-根据Tag-Name定位（不建议）"><a href="#4-根据Tag-Name定位（不建议）" class="headerlink" title="4.根据Tag Name定位（不建议）"></a>4.根据Tag Name定位（不建议）</h2><p>我们以这个标签为例子：<br><code>&lt;em class="show-city-name" data-key="郑州"&gt; 郑州： &lt;/em&gt; </code><br>Em 就是标签名，而后面的 class=”show-city-name” data-key=”郑州”则是这个标签的属性，一个标签可以跟着多个属性，但只能有一个标签名。<strong>一个 HTML 页面中，可能会有很多的相同的标签。</strong><br><code>find_element_by_tag_name</code><br><strong>不建议使用，因为通常会有多个相同标签</strong></p><h2 id="5-根据Class-Name定位（不建议）"><a href="#5-根据Class-Name定位（不建议）" class="headerlink" title="5.根据Class Name定位（不建议）"></a>5.根据Class Name定位（不建议）</h2><p>Class 作为 HTML 标签的属性，规定元素的类名，绝大多数的 class 标签都是用于指向 CSS 中的类。可以同时给一个HTML标签附上多个类，比如说，这样的写法 ：<br><code>&lt;span class="left_menu important"&gt;</code>，同时将 left_menu 和 important 赋给 span 标签（中间的空格叫做间隔符号，表示的是一个标签有多个 class 的属性名称）</p><p>由于 Selenium 现在的版本已经不再支持复合类名,只接受传输的参数是一个class类名，<strong>因此本方法也不建议使用</strong>（有解决方案但不建议）</p><p>比如当有多个符合class时， <code>&lt;input type="text" class="s_ipt bg s_btn" name="wd" id="kw" autocomplete="off"&gt;</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">driver.get(<span class="string">"https://www.baidu.com/"</span>)</span><br><span class="line"><span class="comment">#calss 名查找搜索框</span></span><br><span class="line">driver.find_element_by_class_name(<span class="string">"s_ipt"</span>).send_keys(<span class="string">"selenium"</span>) </span><br><span class="line">elements = driver.find_elements_by_tag_name(<span class="string">'input'</span>) </span><br><span class="line">print(elements) </span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> elements: </span><br><span class="line">    className = element.get_attribute(<span class="string">'class'</span>) </span><br><span class="line">    print(className) </span><br><span class="line">    <span class="keyword">if</span> className == <span class="string">'bg s_btn'</span>:</span><br><span class="line">        subscript=elements.index(element) </span><br><span class="line">elements[subscript].click()</span><br></pre></td></tr></tbody></table></figure><h2 id="6-根据CSS定位"><a href="#6-根据CSS定位" class="headerlink" title="6.根据CSS定位"></a>6.根据CSS定位</h2><p>即Copy selector</p><blockquote><p>“[name=wd]”表示选择所有 name 属性为 wd 的元素（虽然这个页面只有一个）<br>“#kw”，选择 id 为 kw 的元素（id 是唯一的，你只能选择到一个）<br>“[src^=”http”]”，选择所有以 http 作为 src 开头的元素<br>“html &gt; body &gt; form &gt; span &gt; input”，从标签 html 中选出标签 body，再以此类推，直到选择 input 标签<br>“.s_ipt”，表示选择所有 class 属性为 s_ipt 的标签，不要忽略了前面的点，前面的点才是关键的<br>“span.soutu-btn&gt; input#kw”像这种则是复合写法，首先查找到class属性中含有soutu-btn的span标签，然后进去span标签的子元素中查找id为kw的input标签</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">driver.get(<span class="string">"https://www.baidu.com/"</span>) </span><br><span class="line"><span class="comment">#clss 名查找搜索框</span></span><br><span class="line">driver.find_element_by_css_selector(<span class="string">"#kw"</span>).send_keys(<span class="string">"selenium"</span>) </span><br><span class="line">driver.find_element_by_css_selector(<span class="string">"#su"</span>).click() </span><br><span class="line"><span class="comment">#退出</span></span><br><span class="line">time.sleep(<span class="number">2</span>) </span><br><span class="line">driver.quit()</span><br></pre></td></tr></tbody></table></figure><h2 id="7-根据Link-Text定位"><a href="#7-根据Link-Text定位" class="headerlink" title="7.根据Link Text定位"></a>7.根据Link Text定位</h2><p>Link text 定位方法定位的是带有超链接的文字。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#打开新闻</span></span><br><span class="line">time.sleep(<span class="number">2</span>) </span><br><span class="line">driver.find_element_by_link_text(<span class="string">"新闻"</span>).click() </span><br><span class="line">driver.back() </span><br><span class="line"><span class="comment">#打开地图</span></span><br><span class="line">time.sleep(<span class="number">2</span>) </span><br><span class="line">driver.find_element_by_link_text(<span class="string">"地图"</span>).click() </span><br><span class="line">driver.back() </span><br><span class="line"><span class="comment">#打开视频</span></span><br><span class="line">time.sleep(<span class="number">2</span>) </span><br><span class="line">driver.find_element_by_link_text(<span class="string">"视频"</span>).click() </span><br><span class="line">driver.back() </span><br><span class="line"><span class="comment">#退出</span></span><br><span class="line">time.sleep(<span class="number">2</span>) </span><br><span class="line">driver.quit()</span><br></pre></td></tr></tbody></table></figure><h2 id="8-根据Partial-Link-Text定位"><a href="#8-根据Partial-Link-Text定位" class="headerlink" title="8.根据Partial Link Text定位"></a>8.根据Partial Link Text定位</h2><p>部分文字定位主要用于网站的文字会经常变化，但读者可以确定包含某个特定字符</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#打开新闻</span></span><br><span class="line">time.sleep(<span class="number">2</span>) </span><br><span class="line">driver.find_element_by_partial_link_text(<span class="string">"新"</span>).click() </span><br><span class="line">driver.back() </span><br><span class="line"><span class="comment">#打开地图</span></span><br><span class="line">time.sleep(<span class="number">2</span>) </span><br><span class="line">driver.find_element_by_partial_link_text(<span class="string">"地"</span>).click() </span><br><span class="line">driver.back() </span><br><span class="line"><span class="comment">#打开视频</span></span><br><span class="line">time.sleep(<span class="number">2</span>) </span><br><span class="line">driver.find_element_by_partial_link_text(<span class="string">"视"</span>).click() </span><br><span class="line">driver.back() </span><br><span class="line"><span class="comment">#退出</span></span><br><span class="line">time.sleep(<span class="number">2</span>) </span><br><span class="line">driver.quit()</span><br></pre></td></tr></tbody></table></figure><h1 id="PhantomJS"><a href="#PhantomJS" class="headerlink" title="PhantomJS"></a>PhantomJS</h1><p>selenium是python的一个第三方自动化测试库，也非常适合用来写爬虫，而PhantomJS是其子包Webdriver下面的一个浏览器接口，除了 PhantomJS浏览器，Webdriver 还整合了Chrome、Firefox、IE等浏览器，并提供了操作这些浏览器的接口。<br>因PhantomJS也称无界面浏览器，不需要界面的同时占用的内存也相对较小，更适用于大规模多进程爬数据（开几十个Chrome进程爬数据，那真是内存噩梦！）。<br>简单容易上手的selenium库，是爬动态网页的杀手级武器，加上PhantomJS威力就更大了。</p><p>Selenium 中 PhantomJS的主要功能类似于其他的Webdriver，<strong>最大的特点在于使用时不会有浏览器页面窗口弹出操作</strong>，占用顶层窗口，也不需要获取焦点。</p><p>安装了PhantomJS后只需两行代码就可以启动：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver </span><br><span class="line">obj = webdriver.PhantomJS()</span><br></pre></td></tr></tbody></table></figure><h2 id="PhantomJS-Selenium实例"><a href="#PhantomJS-Selenium实例" class="headerlink" title="PhantomJS+Selenium实例"></a>PhantomJS+Selenium实例</h2><p>在这个例子中，首先我们创建 PhantomJS 浏览器对象，然后打开 Bing 搜索，首先打印出页面标题，然后在搜索框中输入字符串，截图，点击搜索，截图，点开搜索结果的第一个页面</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入 webdriver </span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver </span><br><span class="line"><span class="keyword">import</span> time </span><br><span class="line"><span class="comment"># 要想调用键盘按键操作需要引入 keys 包</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys </span><br><span class="line"><span class="comment"># 调用环境变量指定的 PhantomJS 浏览器创建浏览器对象</span></span><br><span class="line">driver = webdriver.PhantomJS() </span><br><span class="line"><span class="comment"># get 方法会一直等到页面被完全加载，</span></span><br><span class="line"><span class="comment">#然后才会继续程序，通常测试会在这里选择 time.sleep(2) </span></span><br><span class="line">time.sleep(<span class="number">2</span>) </span><br><span class="line">driver.get(<span class="string">"http://cn.bing.com/"</span>) </span><br><span class="line"><span class="comment">#打印页面标题</span></span><br><span class="line">title_=driver.title </span><br><span class="line">print(title_) </span><br><span class="line"><span class="comment"># id="sb_form_q"是 bing 搜索输入框，输入字符串"SELENIUM 自动化测试" </span></span><br><span class="line">keywords = <span class="string">'SELENIUM 自动化测试'</span> </span><br><span class="line">driver.find_element_by_id(<span class="string">"sb_form_q"</span>).send_keys(keywords) </span><br><span class="line"><span class="comment"># 生成当前页面快照并保存</span></span><br><span class="line">driver.save_screenshot(<span class="string">"bing_1.png"</span>) </span><br><span class="line"><span class="comment">#点击搜索按钮</span></span><br><span class="line">driver.find_element_by_id(<span class="string">"sb_form_go"</span>).click() </span><br><span class="line"><span class="comment"># 生成当前页面快照并保存</span></span><br><span class="line">driver.save_screenshot(<span class="string">"bing_2.png"</span>) </span><br><span class="line"><span class="comment"># 进行当前页面点击第一项</span></span><br><span class="line">driver.find_element_by_xpath(<span class="string">"/html/body/div/ol/li/h2/a"</span>).click() </span><br><span class="line"><span class="comment"># 生成当前页面快照并保存，在这里由于没有页面重定位，仍停留在这个页面</span></span><br><span class="line">driver.save_screenshot(<span class="string">"bing_3.png"</span>) </span><br><span class="line"><span class="comment"># 关闭浏览器</span></span><br><span class="line">driver.quit()</span><br></pre></td></tr></tbody></table></figure><h3 id="PhantomJS调用"><a href="#PhantomJS调用" class="headerlink" title="PhantomJS调用"></a>PhantomJS调用</h3><p>driver = webdriver.PhantomJS() ,该语句默认调用环境变量指定的 PhantomJS 浏览器创建浏览器对象，如果没有在环境变量指定 PhantomJS 位置，这里应该指定为你 phantomjs 的安装路径，直接指向 bin 文件夹下的 exe 文件，使用如下语句：<br>driver = webdriver.PhantomJS(executable_path=”【path】”) </p><h3 id="Selenium退出"><a href="#Selenium退出" class="headerlink" title="Selenium退出"></a>Selenium退出</h3><p>Selenium 中含有两种退出方法，分别是 close 方法和 quit 方法，区别在于关闭 driver时使用了 driver.close(),close方法关闭后并不会清除临时文件中的 webdriver临时文件。用 driver.quit(),quit 关闭浏览器后，会自动删除临时文件夹。</p><h2 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h2><h3 id="unable-to-find-element-with-id-‘kw’"><a href="#unable-to-find-element-with-id-‘kw’" class="headerlink" title="unable to find element with id ‘kw’"></a>unable to find element with id ‘kw’</h3><p>可能读者可以在页面源码确实发现某些元素，但通过selenium的元素查找方法find_element_by_xpath(),find_element_by_id()等类似定位函数无法获得该元素对象，比如说提示“unable to find element with id ‘kw’”的错误。那么可能会存在一种特殊情况，<strong>元素被包裹在一个特定的frame中</strong>。<br>如果如此，那么你还需要首先使用： </p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Frame_name= driver.find_element_by_id(【Frame_name】) </span><br><span class="line">driver.switch_to_frame(Frame_name) </span><br></pre></td></tr></tbody></table></figure><p>需要注意的是，读者在切换到这个 frame 之后，只能访问当前 frame 的内容，如果想要回到默认内容（默认的 frame），selenium 中有一个函数是专门为这种情况准备的：<br><code>driver.switch_to_default_content()</code></p><h3 id="PhantomJS进程不自动退出"><a href="#PhantomJS进程不自动退出" class="headerlink" title="PhantomJS进程不自动退出"></a>PhantomJS进程不自动退出</h3><p>主程序退出后，selenium 不能也无法保证 PhantomJS 也成功退出，笔者在这里建议读者最好手动关闭 PhantomJS 进程。下面一行代码可以帮助你免除这个麻烦：<br><code>driver.quit()</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Date: 2021-01-11 13:51&lt;/p&gt;
&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;本书侧重于讲解基于 Selenium 开源程序的网络爬虫方面的自动化技术。&lt;br</summary>
      
    
    
    
    <category term="读书笔记" scheme="http://example.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Selenium" scheme="http://example.com/tags/Selenium/"/>
    
  </entry>
  
  <entry>
    <title>统计学-从数据到结论</title>
    <link href="http://example.com/2020/11/09/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%BB%9F%E8%AE%A1%E5%AD%A6%20-%20%E4%BB%8E%E6%95%B0%E6%8D%AE%E5%88%B0%E7%BB%93%E8%AE%BA/"/>
    <id>http://example.com/2020/11/09/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%BB%9F%E8%AE%A1%E5%AD%A6%20-%20%E4%BB%8E%E6%95%B0%E6%8D%AE%E5%88%B0%E7%BB%93%E8%AE%BA/</id>
    <published>2020-11-09T09:32:00.000Z</published>
    <updated>2021-01-16T10:00:22.374Z</updated>
    
    <content type="html"><![CDATA[<p>三星。<br>入门的话推荐看前六章就够了，概念讲得较基础和细致，可以打下比较好的统计学基础。遗憾的是，从回归和分类开始就有点一笔带过的意思，让人看得摸不着头脑，故不建议看后面几章。</p><p><img src="https://i.loli.net/2020/11/09/yBGJZ7z9nSIxq4r.png" alt="统计学.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;三星。&lt;br&gt;入门的话推荐看前六章就够了，概念讲得较基础和细致，可以打下比较好的统计学基础。遗憾的是，从回归和分类开始就有点一笔带过的意思，让人看得摸不着头脑，故不建议看后面几章。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/11/09</summary>
      
    
    
    
    <category term="读书笔记" scheme="http://example.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="统计学" scheme="http://example.com/tags/%E7%BB%9F%E8%AE%A1%E5%AD%A6/"/>
    
  </entry>
  
</feed>
