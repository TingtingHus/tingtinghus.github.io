<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>三味书屋</title>
  
  <subtitle>老骥伏枥，志在千里</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-01-16T08:58:15.265Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Tingting Hu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Pandas数据清洗可视化步骤</title>
    <link href="http://example.com/2020/12/20/Pandas%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97%E5%8F%AF%E8%A7%86%E5%8C%96%E6%AD%A5%E9%AA%A4(HTT%E8%87%AA%E6%88%91%E6%93%8D%E4%BD%9C%E7%89%8820210115)/"/>
    <id>http://example.com/2020/12/20/Pandas%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97%E5%8F%AF%E8%A7%86%E5%8C%96%E6%AD%A5%E9%AA%A4(HTT%E8%87%AA%E6%88%91%E6%93%8D%E4%BD%9C%E7%89%8820210115)/</id>
    <published>2020-12-19T16:00:00.000Z</published>
    <updated>2021-01-16T08:58:15.265Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-读原文件数据"><a href="#一-读原文件数据" class="headerlink" title="一.读原文件数据"></a>一.读原文件数据</h1><h2 id="1-整体读数据，再生成dataframe，速度快"><a href="#1-整体读数据，再生成dataframe，速度快" class="headerlink" title="1.整体读数据，再生成dataframe，速度快"></a>1.整体读数据，再生成dataframe，速度快</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果数据是字典型列表，列表型列表均可以使用此方法</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    lines = f.readlines()</span><br><span class="line">    str_lines = <span class="built_in">str</span>(lines).replace(<span class="string">"'"</span>, <span class="string">""</span>).replace(<span class="string">r"\n"</span>, <span class="string">""</span>)  <span class="comment"># 转为字符串，同时删除冗余字符</span></span><br><span class="line">    list_dict = <span class="built_in">eval</span>(str_lines)   <span class="comment"># 从字符串转回包含字典的列表</span></span><br><span class="line">    df = pd.DataFrame(list_dict)</span><br></pre></td></tr></tbody></table></figure><h2 id="2-按行读取，动态分配内存，速度慢"><a href="#2-按行读取，动态分配内存，速度慢" class="headerlink" title="2.按行读取，动态分配内存，速度慢"></a>2.按行读取，动态分配内存，速度慢</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此方法需要自行设置dataframe列名</span></span><br><span class="line">my_dict = {}</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    lines = f.readlines()</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        my_dict = <span class="built_in">eval</span>(line)</span><br><span class="line">        df = df.append(my_dict, ignore_index=<span class="literal">True</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="3-创建dataframe"><a href="#3-创建dataframe" class="headerlink" title="3.创建dataframe"></a>3.创建dataframe</h2><h3 id="创建空dataframe（仅列名）"><a href="#创建空dataframe（仅列名）" class="headerlink" title="创建空dataframe（仅列名）"></a>创建空dataframe（仅列名）</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_df = pd.DataFrame(columns=[<span class="string">'id'</span>, <span class="string">'domain'</span>, <span class="string">'tenant_id'</span>])</span><br></pre></td></tr></tbody></table></figure><h3 id="将字典列表转换成dataframe"><a href="#将字典列表转换成dataframe" class="headerlink" title="将字典列表转换成dataframe"></a>将字典列表转换成dataframe</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">list_dict = [{<span class="string">'id'</span>:<span class="number">1234</span>,<span class="string">'domain'</span>:<span class="string">'STR'</span>,<span class="string">'tenant_id'</span>:<span class="string">'CN'</span>},{<span class="string">'id'</span>:<span class="number">14526</span>,<span class="string">'domain'</span>:<span class="string">'EDD'</span>,<span class="string">'tenant_id'</span>:<span class="string">'SG'</span>},....]</span><br><span class="line">my_df = pd.DataFrame(list_dict)</span><br></pre></td></tr></tbody></table></figure><h3 id="从dataframe中选取一列，创建Series"><a href="#从dataframe中选取一列，创建Series" class="headerlink" title="从dataframe中选取一列，创建Series"></a>从dataframe中选取一列，创建Series</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_se = pd.Series(my_df[<span class="string">'topic_id'</span>].values, index=my_df[<span class="string">'group'</span>])</span><br></pre></td></tr></tbody></table></figure><h2 id="4-解决df中汉字编码问题"><a href="#4-解决df中汉字编码问题" class="headerlink" title="4.解决df中汉字编码问题"></a>4.解决df中汉字编码问题</h2><p>如果汉字中遭遇编码问题，可以遍历修改df中编码</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> my_df.columns:</span><br><span class="line">    <span class="keyword">if</span> my_df[col].dtype == <span class="built_in">object</span>:</span><br><span class="line">        my_df[col] = my_df[col].apply(</span><br><span class="line">            <span class="keyword">lambda</span> x: np.nan <span class="keyword">if</span> x == np.nan <span class="keyword">else</span> <span class="built_in">str</span>(x).encode(<span class="string">'utf-8'</span>, <span class="string">'replace'</span>).decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></tbody></table></figure><h1 id="二-df数据预处理"><a href="#二-df数据预处理" class="headerlink" title="二.df数据预处理"></a>二.df数据预处理</h1><h2 id="1-去重"><a href="#1-去重" class="headerlink" title="1.去重"></a>1.去重</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按列['topic_id']去重</span></span><br><span class="line">my_df1 = pd.read_csv(<span class="string">"my_df"</span>).drop_duplicates(subset=[<span class="string">'topic_id'</span>])</span><br><span class="line"><span class="comment"># 按列['topic_id', 'reply_id', 'reply_pub_time'] 去重</span></span><br><span class="line">my_df2 = pd.read_csv(<span class="string">"my_df"</span>).drop_duplicates(subset=[<span class="string">'col1'</span>, <span class="string">'col2'</span>, <span class="string">'col3'</span>])</span><br></pre></td></tr></tbody></table></figure><h2 id="2-空值处理"><a href="#2-空值处理" class="headerlink" title="2.空值处理"></a>2.空值处理</h2><h3 id="空值补0"><a href="#空值补0" class="headerlink" title="空值补0"></a>空值补0</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_df1 = my_df.fillna(<span class="number">0</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="删除空值行"><a href="#删除空值行" class="headerlink" title="删除空值行"></a>删除空值行</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># axis：0: 行操作（默认），1: 列操作</span></span><br><span class="line"><span class="comment"># how：any: 只要有空值就删除（默认），all:全部为空值才删除</span></span><br><span class="line">my_df1 = my_df.dropna(axis=<span class="number">0</span>, how=<span class="string">'any'</span>, inplace=<span class="literal">True</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="3-修改列数据格式"><a href="#3-修改列数据格式" class="headerlink" title="3.修改列数据格式"></a>3.修改列数据格式</h2><h3 id="时间格式"><a href="#时间格式" class="headerlink" title="时间格式"></a>时间格式</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">my_df[<span class="string">'dt'</span>] = pd.to_datetime(my_df[<span class="string">'dt'</span>], <span class="built_in">format</span>=<span class="string">'%Y/%m/%d'</span>)</span><br><span class="line"><span class="comment"># 也可以多列同时修改</span></span><br><span class="line">my_df[[<span class="string">'col1'</span>, <span class="string">'col2'</span>, <span class="string">'col3'</span>]] = pd.to_datetime(my_df[[<span class="string">'col1'</span>, <span class="string">'col2'</span>, <span class="string">'col3'</span>]], <span class="built_in">format</span>=<span class="string">'%Y/%m/%d'</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="去掉默认格式中的多余部分（如汉字、英文）"><a href="#去掉默认格式中的多余部分（如汉字、英文）" class="headerlink" title="去掉默认格式中的多余部分（如汉字、英文）"></a>去掉默认格式中的多余部分（如汉字、英文）</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 原始数据中含[]</span></span><br><span class="line"><span class="comment"># strip() ,去掉()中内容</span></span><br><span class="line">my_df[<span class="string">'area'</span>] = my_df[<span class="string">'area'</span>].<span class="built_in">str</span>[<span class="number">0</span>].<span class="built_in">str</span>.strip(<span class="string">'㎡'</span>).astype(<span class="built_in">float</span>)  </span><br><span class="line">my_df[<span class="string">'class'</span>] = my_df[<span class="string">'class'</span>].<span class="built_in">str</span>[<span class="number">0</span>].<span class="built_in">str</span>.strip(<span class="string">'室'</span>).astype(<span class="built_in">float</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># replace()，将()内容进行替换</span></span><br><span class="line">my_df[<span class="string">'follower'</span>] = my_df[<span class="string">'follower'</span>].<span class="built_in">str</span>.strip(<span class="string">'关注（人）'</span>).astype(<span class="built_in">float</span>)</span><br><span class="line">my_df[<span class="string">'views'</span>] = my_df[<span class="string">'views'</span>].<span class="built_in">str</span>.strip(<span class="string">'浏览（次）'</span>).replace(<span class="string">'暂无数据'</span>, <span class="string">''</span>)  </span><br></pre></td></tr></tbody></table></figure><h3 id="修改有编码问题的数据"><a href="#修改有编码问题的数据" class="headerlink" title="修改有编码问题的数据"></a>修改有编码问题的数据</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_df[<span class="string">'col'</span>] = my_df[<span class="string">'col'</span>].apply(<span class="keyword">lambda</span> x: np.nan <span class="keyword">if</span> x == np.nan <span class="keyword">else</span> <span class="built_in">str</span>(x).encode(<span class="string">'utf-8'</span>).decode(<span class="string">'unicode_escape'</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="4-列类型转换"><a href="#4-列类型转换" class="headerlink" title="4.列类型转换"></a>4.列类型转换</h2><h3 id="转为数据类型"><a href="#转为数据类型" class="headerlink" title="转为数据类型"></a>转为数据类型</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">my_df[<span class="string">'area'</span>] = my_df[<span class="string">'area'</span>].astype(<span class="built_in">float</span>)  </span><br><span class="line"><span class="comment"># 可以多列一起转换</span></span><br><span class="line">my_df[[<span class="string">'books'</span>,<span class="string">'group_num'</span>,<span class="string">'music'</span>]] = my_df[[<span class="string">'books'</span>,<span class="string">'group_num'</span>,<span class="string">'music'</span>]].apply(pd.to_numeric)</span><br><span class="line">my_df[<span class="string">'views'</span>] = my_df[<span class="string">'views'</span>].<span class="built_in">str</span>.strip(<span class="string">'浏览（次）'</span>).apply(pd.to_numeric, errors=<span class="string">'coerce'</span>)</span><br><span class="line">my_df[<span class="string">'transmit'</span>] = my_df[<span class="string">'transmit'</span>].<span class="built_in">str</span>.strip(<span class="string">'['</span>).<span class="built_in">str</span>.strip(<span class="string">']'</span>).apply(pd.to_numeric)</span><br></pre></td></tr></tbody></table></figure><h2 id="5-数据裁剪"><a href="#5-数据裁剪" class="headerlink" title="5.数据裁剪"></a>5.数据裁剪</h2><h3 id="选择时间范围数据"><a href="#选择时间范围数据" class="headerlink" title="选择时间范围数据"></a>选择时间范围数据</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_df1 = my_df[(my_df[<span class="string">'deal_dt'</span>] &lt; <span class="string">'2020-11-01'</span>) &amp; (my_df[<span class="string">'deal_dt'</span>] &gt; <span class="string">'2020-05-31'</span>)]</span><br></pre></td></tr></tbody></table></figure><h3 id="选择满足条件的行"><a href="#选择满足条件的行" class="headerlink" title="选择满足条件的行"></a>选择满足条件的行</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_df1 = my_df[(my_df[<span class="string">'type'</span>] != <span class="string">'车库'</span>) &amp; (my_df[<span class="string">'type'</span>] != <span class="string">'别墅'</span>)]</span><br><span class="line">my_df1 = my_df.loc[my_df[<span class="string">'group'</span>] == <span class="string">'blabla'</span>,[<span class="string">'col1'</span>]][<span class="string">'clo2'</span>].drop_duplicates()</span><br></pre></td></tr></tbody></table></figure><h3 id="删除满足条件的行"><a href="#删除满足条件的行" class="headerlink" title="删除满足条件的行"></a>删除满足条件的行</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_df1 = my_df.drop(my_df[(my_df[<span class="string">'group'</span>] == <span class="string">'wakao'</span>) | (my_df[<span class="string">'group'</span>] == <span class="string">'670255'</span>)].index)</span><br></pre></td></tr></tbody></table></figure><h3 id="去除无限大无限小"><a href="#去除无限大无限小" class="headerlink" title="去除无限大无限小"></a>去除无限大无限小</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clean_dataset</span>(<span class="params">df</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(df, pd.DataFrame), <span class="string">"df needs to be a pd.DataFrame"</span></span><br><span class="line">    df.dropna(inplace=<span class="literal">True</span>)  <span class="comment"># df.dropna(axis=0 , inplace=True) #不存在的值，删除整行，默认为0</span></span><br><span class="line">    indices_to_keep = ~df.isin([np.nan, np.inf, -np.inf]).<span class="built_in">any</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> df[indices_to_keep].astype(np.float64)</span><br></pre></td></tr></tbody></table></figure><h2 id="6-在原始列基础上新生列"><a href="#6-在原始列基础上新生列" class="headerlink" title="6.在原始列基础上新生列"></a>6.在原始列基础上新生列</h2><h3 id="提取时间中天、月、年"><a href="#提取时间中天、月、年" class="headerlink" title="提取时间中天、月、年"></a>提取时间中天、月、年</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">my_df[<span class="string">'deal_dt_ym'</span>] = my_df[<span class="string">'deal_dt'</span>].dt.strftime(<span class="string">'%Y%m'</span>)</span><br><span class="line">hours = my_df[<span class="string">'reply_pub_time'</span>].dt.hour.value_counts(sort=<span class="literal">False</span>)</span><br><span class="line">my_df[<span class="string">'topic_day'</span>] = my_df[<span class="string">'topic_pub_time'</span>].dt.day</span><br><span class="line">my_df[<span class="string">'deal_year'</span>] = my_df[<span class="string">'deal_dt'</span>].dt.year</span><br><span class="line">my_df[<span class="string">'deal_month'</span>] = my_df[<span class="string">'deal_dt'</span>].dt.month</span><br></pre></td></tr></tbody></table></figure><h3 id="两列数据做差"><a href="#两列数据做差" class="headerlink" title="两列数据做差"></a>两列数据做差</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">my_df[<span class="string">'used_total_diff_price'</span>] = my_df[<span class="string">'used_price'</span>] - my_df[<span class="string">'total_price'</span>]</span><br><span class="line">my_df[<span class="string">'col3'</span>] = (my_df[<span class="string">'col1'</span>] / my_df[<span class="string">'col2'</span>]).<span class="built_in">round</span>(decimals=<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 与固定数据做差</span></span><br><span class="line">my_df[<span class="string">'year_diff'</span>] = (datetime.datetime.now() - my_df[<span class="string">'build_time'</span>])/<span class="number">365.2425</span></span><br><span class="line"><span class="comment"># 与固定数的加减</span></span><br><span class="line">my_df[<span class="string">'col'</span>] = my_df[<span class="string">'col'</span>] / <span class="number">2</span> </span><br></pre></td></tr></tbody></table></figure><h3 id="求每个分组里面的均值"><a href="#求每个分组里面的均值" class="headerlink" title="求每个分组里面的均值"></a>求每个分组里面的均值</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y_ = my_df.groupby([<span class="string">'deal_dt_ym'</span>])[<span class="string">'build_diff'</span>].apply(<span class="keyword">lambda</span> g: g.mean(skipna=<span class="literal">True</span>)).dt.days.tolist()</span><br></pre></td></tr></tbody></table></figure><h3 id="原列满足条件打标生成新列（满五年，tag-1）"><a href="#原列满足条件打标生成新列（满五年，tag-1）" class="headerlink" title="原列满足条件打标生成新列（满五年，tag=1）"></a>原列满足条件打标生成新列（满五年，tag=1）</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用apply函数, years字段满足''关键词，则判断这一列赋值为1,否则为0</span></span><br><span class="line">my_df[<span class="string">'5years'</span>] = my_df[<span class="string">'years'</span>].apply(<span class="keyword">lambda</span> x: <span class="number">1</span> <span class="keyword">if</span> <span class="string">'满五年'</span> <span class="keyword">in</span> x <span class="keyword">else</span> <span class="number">0</span>)</span><br><span class="line">my_df[<span class="string">'2years'</span>] = my_df[<span class="string">'years'</span>].apply(<span class="keyword">lambda</span> x: <span class="number">1</span> <span class="keyword">if</span> <span class="string">'满两年'</span> <span class="keyword">in</span> x <span class="keyword">else</span> <span class="number">0</span>)</span><br><span class="line"><span class="comment"># 也可以使用正则</span></span><br><span class="line">my_df[<span class="string">'des'</span>] = my_df[<span class="string">'location'</span>].apply(<span class="keyword">lambda</span> x: <span class="number">0</span> <span class="keyword">if</span> <span class="built_in">len</span>(pattern.findall(x)) == <span class="number">0</span> <span class="keyword">else</span> <span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="修改列名"><a href="#修改列名" class="headerlink" title="修改列名"></a>修改列名</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_df = my_df[[<span class="string">'group'</span>,<span class="string">'topic_owner'</span>]].rename(columns={<span class="string">'topic_owner'</span>: <span class="string">'reply_id_2'</span>})</span><br></pre></td></tr></tbody></table></figure><h3 id="映射生成新列"><a href="#映射生成新列" class="headerlink" title="映射生成新列"></a>映射生成新列</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_df[<span class="string">'tenant_id'</span>] = my_df[<span class="string">'tenant_id'</span>].<span class="built_in">map</span>(tenant_id_mapping)</span><br></pre></td></tr></tbody></table></figure><h3 id="将数据分段"><a href="#将数据分段" class="headerlink" title="将数据分段"></a>将数据分段</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_df[<span class="string">'tag'</span>] = pd.cut(my_df[<span class="string">'deal_dt'</span>],[my_df[<span class="string">'deal_dt'</span>].<span class="built_in">min</span>(),pd.to_datetime(<span class="string">'2020-09-14'</span>),my_df[<span class="string">'deal_dt'</span>].<span class="built_in">max</span>()],labels=[<span class="number">0</span>,<span class="number">1</span>])</span><br></pre></td></tr></tbody></table></figure><h2 id="7-错误数据订正（人为修改数据）"><a href="#7-错误数据订正（人为修改数据）" class="headerlink" title="7.错误数据订正（人为修改数据）"></a>7.错误数据订正（人为修改数据）</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_df.loc[my_df[<span class="string">'topic_id'</span>] == <span class="string">'202721237'</span>, <span class="string">'topic_pub_time'</span>] = <span class="string">'2020-11-28 11:01:14'</span></span><br></pre></td></tr></tbody></table></figure><h3 id="重置索引"><a href="#重置索引" class="headerlink" title="重置索引"></a>重置索引</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_df_new = my_df.reset_index()</span><br></pre></td></tr></tbody></table></figure><h1 id="三、目标数据提取"><a href="#三、目标数据提取" class="headerlink" title="三、目标数据提取"></a>三、目标数据提取</h1><h2 id="1-获取某几列数据（按顺序）"><a href="#1-获取某几列数据（按顺序）" class="headerlink" title="1.获取某几列数据（按顺序）"></a>1.获取某几列数据（按顺序）</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取某列分组后的数据，生成格式为列表</span></span><br><span class="line">x = my_df.groupby(<span class="string">'col'</span>)[<span class="string">'col'</span>].unique().<span class="built_in">str</span>[<span class="number">0</span>].tolist()</span><br><span class="line"><span class="comment"># 按col列（特定顺序）分组</span></span><br><span class="line">x1 = my_df.sort_values(<span class="string">'col'</span>, ascending=<span class="literal">False</span>).groupby(<span class="string">'col'</span>)[<span class="string">'col'</span>].unique().<span class="built_in">str</span>[<span class="number">0</span>].tolist()</span><br><span class="line"><span class="comment"># 取两位小数</span></span><br><span class="line">y = my_df.sort_values(<span class="string">'col'</span>, ascending=<span class="literal">False</span>).groupby(<span class="string">'col1'</span>)[<span class="string">'col2'</span>].mean().<span class="built_in">round</span>(decimals=<span class="number">2</span>).tolist()</span><br><span class="line"><span class="comment"># 按两列顺序</span></span><br><span class="line">my_df_new = my_df.sort_values([<span class="string">'group'</span>,<span class="string">'reply_zan'</span>], ascending=[<span class="number">0</span>,<span class="number">0</span>]).groupby([<span class="string">'group'</span>,<span class="string">'topic_id'</span>]).head(<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 提取除了某几列剩余别的列</span></span><br><span class="line">X = my_df[my_df.columns.difference([ <span class="string">'tenant_id'</span>,<span class="string">'type'</span>,<span class="string">'zhuangxiu'</span>,<span class="string">'other'</span>])]</span><br></pre></td></tr></tbody></table></figure><h2 id="2-获取某分组下（武侯区）的再分组（每年）数据个数"><a href="#2-获取某分组下（武侯区）的再分组（每年）数据个数" class="headerlink" title="2.获取某分组下（武侯区）的再分组（每年）数据个数"></a>2.获取某分组下（武侯区）的再分组（每年）数据个数</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">my_df[my_df[<span class="string">'tenant_id'</span>] == <span class="string">'武侯'</span>].groupby([<span class="string">'deal_dt_ym'</span>]).count()[<span class="string">'id'</span>].tolist()</span><br><span class="line">my_df[my_df[<span class="string">'tenant_id'</span>] == <span class="string">'武侯'</span>].groupby(<span class="string">'deal_dt_ym'</span>)[<span class="string">'avg_price'</span>].mean().astype(<span class="built_in">int</span>).tolist()</span><br><span class="line"><span class="comment"># value_counts()统计该分组的每种类型个数</span></span><br><span class="line">my_df[my_df[<span class="string">'des'</span>] == <span class="number">1</span>].groupby([<span class="string">'location'</span>])[<span class="string">'location'</span>].value_counts().index.tolist()</span><br></pre></td></tr></tbody></table></figure><h2 id="3-取列的索引"><a href="#3-取列的索引" class="headerlink" title="3.取列的索引"></a>3.取列的索引</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_df[<span class="string">'tenant_id'</span>] = my_df[<span class="string">'tenant_id'</span>].sort_values().index.to_series().tolist()</span><br></pre></td></tr></tbody></table></figure><h2 id="4-比较两列关系提取行，a-b-则输出"><a href="#4-比较两列关系提取行，a-b-则输出" class="headerlink" title="4.比较两列关系提取行，a=b,则输出"></a>4.比较两列关系提取行，a=b,则输出</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将'reply_day'不等于'topic_day的行输出</span></span><br><span class="line">my_df_new = my_df.loc[my_df[<span class="string">'reply_day'</span>] != my_df[<span class="string">'topic_day'</span>],]</span><br></pre></td></tr></tbody></table></figure><h1 id="四、关联表连接"><a href="#四、关联表连接" class="headerlink" title="四、关联表连接"></a>四、关联表连接</h1><h2 id="1-inner-join"><a href="#1-inner-join" class="headerlink" title="1.inner join"></a>1.inner join</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_df3 = my_df1.merge(my_df2, left_on=[<span class="string">'group'</span>, <span class="string">'topic_id'</span>],right_on=[<span class="string">'group'</span>, <span class="string">'topic_id'</span>])</span><br></pre></td></tr></tbody></table></figure><h2 id="2-union-all"><a href="#2-union-all" class="headerlink" title="2.union all"></a>2.union all</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列名一致时是直接添加在原数据后面，列名不一致时有待验证？（在右边添加）</span></span><br><span class="line">row_concat = pd.concat([my_df1, my_df2]).drop_duplicates()</span><br></pre></td></tr></tbody></table></figure><h1 id="五-其它"><a href="#五-其它" class="headerlink" title="五.其它"></a>五.其它</h1><h2 id="groupby"><a href="#groupby" class="headerlink" title="groupby"></a>groupby</h2><h3 id="遍历groupby分组"><a href="#遍历groupby分组" class="headerlink" title="遍历groupby分组"></a>遍历groupby分组</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">my_df_groupby = my_df.groupby([<span class="string">'group'</span>, <span class="string">'reply_id_2'</span>])</span><br><span class="line">my_list_dict = defaultdict(<span class="built_in">list</span>)</span><br><span class="line"><span class="keyword">for</span> name, group <span class="keyword">in</span> my_df_groupby:</span><br><span class="line">    restore = <span class="number">1</span> <span class="keyword">if</span> <span class="built_in">set</span>(group[<span class="string">'reply_day'</span>].values.tolist()) &gt;= <span class="built_in">set</span>([<span class="number">28</span>, <span class="number">29</span>]) <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">    my_list_dict[<span class="string">'group'</span>].append(name[<span class="number">0</span>])</span><br><span class="line">    my_list_dict[<span class="string">'reply_id_2'</span>].append(name[<span class="number">1</span>])</span><br><span class="line">    my_list_dict[<span class="string">'29号留存'</span>].append(restore)</span><br></pre></td></tr></tbody></table></figure><h2 id="常用固定功能"><a href="#常用固定功能" class="headerlink" title="常用固定功能"></a>常用固定功能</h2><h3 id="交换字典key和value"><a href="#交换字典key和value" class="headerlink" title="交换字典key和value"></a>交换字典key和value</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new_group_map = {v: k <span class="keyword">for</span> k, v <span class="keyword">in</span> group_mapping.items()}</span><br></pre></td></tr></tbody></table></figure><h3 id="将Series某列数据按特定索引排序"><a href="#将Series某列数据按特定索引排序" class="headerlink" title="将Series某列数据按特定索引排序"></a>将Series某列数据按特定索引排序</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为将两个指标画到同一坐标系，需要按日均发帖小组顺序输出</span></span><br><span class="line">my_df = pd.DataFrame(used_se)</span><br><span class="line">my_df = my_df.reset_index()</span><br><span class="line">my_df[<span class="string">'group'</span>] = my_df[<span class="string">'group'</span>].astype(<span class="string">'category'</span>)</span><br><span class="line">my_df[<span class="string">'group'</span>].cat.set_categories(order_list, inplace=<span class="literal">True</span>)</span><br><span class="line">my_df.sort_values(<span class="string">'group'</span>, ascending=<span class="literal">True</span>,inplace=<span class="literal">True</span>)</span><br><span class="line">my_df.set_index([<span class="string">'group'</span>])</span><br><span class="line">my_se = pd.Series(my_df[<span class="string">'topic_id'</span>].values, index=my_df[<span class="string">'group'</span>])</span><br></pre></td></tr></tbody></table></figure><h3 id="可以追加元素append的dict"><a href="#可以追加元素append的dict" class="headerlink" title="可以追加元素append的dict"></a>可以追加元素append的dict</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_days_dict = defaultdict(<span class="built_in">list</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="计算列表A和列表B的差集"><a href="#计算列表A和列表B的差集" class="headerlink" title="计算列表A和列表B的差集"></a>计算列表A和列表B的差集</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">retA = [i <span class="keyword">for</span> i <span class="keyword">in</span> x <span class="keyword">if</span> i <span class="keyword">in</span> y]</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-读原文件数据&quot;&gt;&lt;a href=&quot;#一-读原文件数据&quot; class=&quot;headerlink&quot; title=&quot;一.读原文件数据&quot;&gt;&lt;/a&gt;一.读原文件数据&lt;/h1&gt;&lt;h2 id=&quot;1-整体读数据，再生成dataframe，速度快&quot;&gt;&lt;a href=&quot;#1-整体读</summary>
      
    
    
    
    <category term="数据分析" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
    <category term="pandas" scheme="http://example.com/tags/pandas/"/>
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
</feed>
